{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Broadcast Management System Documentation","text":"<p>Welcome to the comprehensive documentation for the Broadcast Management System (BMS). This documentation covers both the frontend React application and the backend Django implementation.</p>"},{"location":"#overview","title":"Overview","text":"<p>The Broadcast Management System is a comprehensive platform designed for media organizations to manage broadcast content, scheduling, and operations. The system enables broadcasters to efficiently organize content, create and maintain broadcast schedules, manage user permissions, and automate various aspects of the broadcasting workflow.</p>"},{"location":"#quick-links","title":"Quick Links","text":"FrontendBackendImplementation <p>Current Status: \u2705 Fully functional React application</p> <ul> <li>Frontend Architecture - Component structure and design patterns</li> <li>Components Overview - Reusable UI components</li> <li>Pages Documentation - Main application pages</li> <li>Data Types - TypeScript interfaces and types</li> <li>API Services - API integration layer</li> </ul> <p>Current Status: \ud83d\udea7 In development (Django + PostgreSQL + Docker)</p> <ul> <li>Architecture Design - Backend system architecture</li> <li>API Endpoints - RESTful API specification</li> <li>Database Models - Django model definitions</li> <li>Authentication - Session-based auth system</li> <li>Docker Setup - Containerized deployment</li> </ul> <p>Current Status: \ud83d\udccb Planning complete, ready for implementation</p> <ul> <li>Implementation Overview - Development roadmap</li> <li>Phase 1: Docker Infrastructure - Container setup</li> <li>Phase 2: Backend Development - Django implementation</li> <li>Phase 3: Integration - Frontend-backend integration</li> <li>Timeline - Project schedule and milestones</li> </ul>"},{"location":"#system-architecture","title":"System Architecture","text":"<pre><code>graph TD\n    FE[React Frontend&lt;br/&gt;Vite + TypeScript + Tailwind]\n    BE[Django Backend&lt;br/&gt;REST API + PostgreSQL]\n    DB[(PostgreSQL&lt;br/&gt;Database)]\n    REDIS[(Redis&lt;br/&gt;Cache &amp; Sessions)]\n    DOCKER[Docker Infrastructure&lt;br/&gt;Containerized Services]\n\n    FE --&gt;|API Requests| BE\n    BE --&gt; DB\n    BE --&gt; REDIS\n\n    subgraph \"Current State\"\n        FE\n        direction TB\n        FE_NOTE[\u2705 Fully Functional&lt;br/&gt;No Backend Required]\n    end\n\n    subgraph \"In Development\"\n        BE\n        DB\n        REDIS\n        DOCKER\n        direction TB\n        BE_NOTE[\ud83d\udea7 Implementation Phase&lt;br/&gt;Based on Frontend API Expectations]\n    end\n\n    style FE fill:#4ade80\n    style FE_NOTE fill:#dcfce7\n    style BE fill:#fbbf24\n    style BE_NOTE fill:#fef3c7</code></pre>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#user-management","title":"User Management","text":"<ul> <li>Role-based access control with predefined roles</li> <li>User authentication and authorization</li> <li>Profile management with department assignments</li> <li>Activity logging and audit trails</li> </ul>"},{"location":"#broadcast-crew-scheduling","title":"Broadcast Crew Scheduling","text":"<ul> <li>Calendar-based scheduling interface</li> <li>Drag-and-drop schedule creation and editing</li> <li>Conflict detection and resolution</li> <li>Recurring broadcast scheduling</li> <li>Schedule templates and validation</li> </ul>"},{"location":"#time-tracking","title":"Time Tracking","text":"<ul> <li>Digital time clock functionality</li> <li>Break time management</li> <li>Timesheet approval workflows</li> <li>Overtime calculation and reporting</li> </ul>"},{"location":"#incident-service-management","title":"Incident &amp; Service Management","text":"<ul> <li>Incident reporting and tracking</li> <li>Service request management</li> <li>Ticket assignment and status tracking</li> <li>Resolution documentation</li> </ul>"},{"location":"#reporting-and-analytics","title":"Reporting and Analytics","text":"<ul> <li>Broadcast schedule reports</li> <li>Time tracking analytics</li> <li>User activity reports</li> <li>Customizable dashboards</li> </ul>"},{"location":"#technology-stack","title":"Technology Stack","text":""},{"location":"#frontend-current","title":"Frontend (Current)","text":"<ul> <li>Framework: React 18 with TypeScript</li> <li>Build Tool: Vite</li> <li>Styling: Tailwind CSS + shadcn/ui components</li> <li>State Management: React Context API</li> <li>Forms: React Hook Form + Zod validation</li> <li>Data Fetching: TanStack Query (React Query)</li> <li>Routing: React Router v6</li> </ul>"},{"location":"#backend-in-development","title":"Backend (In Development)","text":"<ul> <li>Framework: Django 4.2 with Django REST Framework</li> <li>Database: PostgreSQL 14</li> <li>Caching: Redis</li> <li>Task Queue: Celery</li> <li>Authentication: Session-based with CSRF protection</li> <li>Deployment: Docker with Docker Compose</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#for-frontend-development","title":"For Frontend Development","text":"<ol> <li>Development Setup - Set up the React development environment</li> <li>Frontend Architecture - Understand the application structure</li> <li>Component Overview - Learn about reusable components</li> </ol>"},{"location":"#for-backend-development","title":"For Backend Development","text":"<ol> <li>Backend Architecture - Understand the planned backend structure</li> <li>Docker Setup - Set up the development environment</li> <li>Implementation Plan - Follow the development roadmap</li> </ol>"},{"location":"#for-contributors","title":"For Contributors","text":"<ol> <li>Contributing Guide - How to contribute to the project</li> <li>Code Standards - Coding conventions and best practices</li> <li>Testing - Testing strategies and guidelines</li> </ol>"},{"location":"#project-status","title":"Project Status","text":"Component Status Description Frontend Application \u2705 Complete Fully functional React app with all features UI Components \u2705 Complete Comprehensive component library with shadcn/ui Authentication Flow \u2705 Complete Ready for backend integration API Service Layer \u2705 Complete Structured to work with Django backend Backend Architecture \ud83d\udccb Designed Detailed architectural decisions completed Docker Infrastructure \ud83d\udccb Designed Development and production configurations planned Django Backend \ud83d\udea7 In Progress Implementation starting with Phase 1 Database Models \ud83d\udccb Designed Django models mapped to frontend requirements API Endpoints \ud83d\udccb Designed RESTful API specification complete"},{"location":"#documentation-sections","title":"Documentation Sections","text":"<ul> <li>Getting Started - Setup and installation guides</li> <li>Frontend Documentation - Complete frontend reference</li> <li>Backend Documentation - Backend implementation details</li> <li>API Reference - Detailed API endpoint documentation</li> <li>Implementation Plan - Development roadmap and phases</li> <li>Development - Contributing and development guidelines</li> </ul> <p>Documentation Status</p> <p>This documentation is actively maintained and updated as the project evolves. The frontend documentation is complete and reflects the current implementation. Backend documentation represents the planned implementation based on completed architectural design phases.</p> <p>Need Help?</p> <ul> <li>Check the FAQ for common questions</li> <li>Review the troubleshooting guide for common issues</li> <li>Submit issues on GitHub for bugs or feature requests </li> </ul>"},{"location":"backend-implementation-index/","title":"Backend Implementation Documentation","text":""},{"location":"backend-implementation-index/#overview","title":"Overview","text":"<p>This document serves as an index for all documentation related to the implementation of the Django-based backend for the Broadcast Management System. The backend will be containerized using Docker and will use PostgreSQL as the database.</p>"},{"location":"backend-implementation-index/#table-of-contents","title":"Table of Contents","text":""},{"location":"backend-implementation-index/#1-backend-implementation-plan","title":"1. Backend Implementation Plan","text":"<p>Comprehensive overview of the backend implementation strategy, including architecture, phases, technical details, and risk management.</p>"},{"location":"backend-implementation-index/#2-docker-configuration-guide","title":"2. Docker Configuration Guide","text":"<p>Detailed information about the Docker infrastructure, including: - Docker Compose configuration for development and production - Dockerfile configurations - Environment setup - Service dependencies</p>"},{"location":"backend-implementation-index/#3-django-models-design","title":"3. Django Models Design","text":"<p>Complete database schema design, including: - Entity-relationship diagram - Model definitions - Relationships - Field types and validation - Serializer examples</p>"},{"location":"backend-implementation-index/#4-api-endpoints-design","title":"4. API Endpoints Design","text":"<p>Documentation of all REST API endpoints, including: - Authentication endpoints - CRUD operations for all entities - Request and response formats - Filtering and pagination - Authentication and permissions</p>"},{"location":"backend-implementation-index/#5-implementation-timeline","title":"5. Implementation Timeline","text":"<p>Detailed timeline for the backend implementation, including: - Phase breakdown - Weekly tasks - Resource allocation - Milestones and deliverables - Risk mitigation strategies</p>"},{"location":"backend-implementation-index/#how-to-use-this-documentation","title":"How to Use This Documentation","text":"<ol> <li>Start with the Backend Implementation Plan to understand the overall strategy</li> <li>Review the Django Models Design to understand the data structure</li> <li>Examine the API Endpoints Design to see how the frontend will interact with the backend</li> <li>Use the Docker Configuration Guide for setting up the development environment</li> <li>Follow the Implementation Timeline to track progress through the project</li> </ol>"},{"location":"backend-implementation-index/#development-setup","title":"Development Setup","text":"<p>To set up the development environment:</p> <pre><code># Clone the repository\ngit clone https://github.com/your-org/broadcast.git\ncd broadcast\n\n# Copy environment files\ncp .env.example .env.dev\ncp .env.db.example .env.db\n\n# Start the Docker containers\ndocker-compose up -d\n\n# Apply migrations\ndocker-compose exec web python manage.py migrate\n\n# Create a superuser\ndocker-compose exec web python manage.py createsuperuser\n</code></pre>"},{"location":"backend-implementation-index/#contributing","title":"Contributing","text":"<p>When contributing to the backend codebase, please ensure:</p> <ol> <li>All new features have appropriate tests</li> <li>Model changes include migrations</li> <li>API endpoints are documented</li> <li>Docker configurations are tested</li> <li>Code follows the project's style guide</li> </ol>"},{"location":"backend-implementation-index/#contact","title":"Contact","text":"<p>For questions about this implementation plan, contact:</p> <ul> <li>Backend Development: backend-lead@example.com</li> <li>DevOps Support: devops@example.com </li> </ul>"},{"location":"projectbrief/","title":"Broadcast Management System - Project Brief","text":""},{"location":"projectbrief/#project-overview","title":"Project Overview","text":"<p>The Broadcast Management System (BMS) is a comprehensive platform designed for media organizations to manage broadcast content, scheduling, and operations. The system enables broadcasters to efficiently organize content, create and maintain broadcast schedules, manage user permissions, and automate various aspects of the broadcasting workflow.</p>"},{"location":"projectbrief/#business-objectives","title":"Business Objectives","text":"<ol> <li>Streamline the management of broadcast content and scheduling</li> <li>Reduce manual effort and human error in broadcast operations</li> <li>Provide real-time visibility into broadcast schedules and content status</li> <li>Enable efficient collaboration between different roles in broadcast organizations</li> <li>Support compliance with broadcasting regulations through proper logging and audit trails</li> <li>Integrate with external systems for content acquisition and playout</li> </ol>"},{"location":"projectbrief/#target-users","title":"Target Users","text":"<ol> <li>Content Managers: Responsible for organizing and managing broadcast content</li> <li>Broadcast Schedulers: Create and maintain broadcast schedules</li> <li>Technical Operators: Handle technical aspects of broadcasting</li> <li>Station Managers: Oversee overall broadcast operations</li> <li>Administrators: Manage system settings and user permissions</li> </ol>"},{"location":"projectbrief/#core-functional-requirements","title":"Core Functional Requirements","text":""},{"location":"projectbrief/#1-user-management","title":"1. User Management","text":"<ul> <li>Role-based access control with predefined roles (Manager, Scheduler, Operator, Administrator)</li> <li>User authentication and authorization</li> <li>User profile management</li> <li>Activity logging and audit trails</li> <li>Password policies and security features</li> </ul>"},{"location":"projectbrief/#3-broadcast-crew-scheduling","title":"3. Broadcast Crew Scheduling","text":"<ul> <li>Calendar-based scheduling interface</li> <li>Drag-and-drop schedule creation and editing</li> <li>Conflict detection and resolution</li> <li>Recurring broadcast scheduling</li> <li>Schedule validation</li> <li>Schedule templates</li> <li>Schedule export to various formats</li> <li>Real-time schedule updates</li> </ul>"},{"location":"projectbrief/#5-reporting-and-analytics","title":"5. Reporting and Analytics","text":"<ul> <li>Broadcast schedule reports</li> <li>Content usage statistics</li> <li>User activity reports</li> <li>System performance metrics</li> <li>Customizable dashboards</li> <li>Export reports to various formats (PDF, Excel, CSV)</li> </ul>"},{"location":"projectbrief/#6-api-and-integration","title":"6. API and Integration","text":"<ul> <li>RESTful API for integration with external systems</li> <li>Webhook support for event notifications</li> <li>Integration with content delivery networks</li> <li>Support for industry standard protocols</li> <li>Authentication and rate limiting for API access</li> </ul>"},{"location":"projectbrief/#technical-requirements","title":"Technical Requirements","text":""},{"location":"projectbrief/#2-performance","title":"2. Performance","text":"<ul> <li>Support for concurrent users (minimum 10 simultaneous users)</li> <li>Page load times under 2 seconds for typical operations</li> <li>Efficient handling of large schedules (365+ days)</li> <li>Scalable architecture for future growth</li> </ul>"},{"location":"projectbrief/#3-security","title":"3. Security","text":"<ul> <li>Role-based access control</li> <li>Secure authentication</li> <li>HTTPS encryption</li> <li>Protection against common web vulnerabilities (XSS, CSRF, SQL injection)</li> <li>Regular security updates</li> <li>Audit logging for all critical operations</li> </ul>"},{"location":"projectbrief/#4-reliability","title":"4. Reliability","text":"<ul> <li>99.9% uptime goal</li> <li>Automated backups</li> <li>Error handling and logging</li> <li>Failover capabilities</li> <li>Monitoring and alerting</li> </ul>"},{"location":"projectbrief/#5-compatibility","title":"5. Compatibility","text":"<ul> <li>Support for modern web browsers (Chrome, Firefox, Safari, Edge)</li> <li>Responsive design for mobile and tablet access</li> <li>API compatibility with industry standard systems</li> </ul>"},{"location":"projectbrief/#non-functional-requirements","title":"Non-functional Requirements","text":""},{"location":"projectbrief/#1-usability","title":"1. Usability","text":"<ul> <li>Intuitive user interface</li> <li>Contextual help and tooltips</li> <li>Keyboard shortcuts for power users</li> <li>Consistent design language</li> <li>Quick access to frequently used functions</li> </ul>"},{"location":"projectbrief/#2-maintainability","title":"2. Maintainability","text":"<ul> <li>Well-documented code</li> <li>Automated tests with high coverage</li> <li>Modular architecture</li> <li>Consistent coding standards</li> <li>Comprehensive technical documentation</li> </ul>"},{"location":"projectbrief/#3-localization","title":"3. Localization","text":"<ul> <li>Multi-language support</li> <li>Time zone handling</li> <li>Support for different date/time formats</li> <li>Currency formatting for financial aspects</li> </ul>"},{"location":"projectbrief/#4-accessibility","title":"4. Accessibility","text":"<ul> <li>WCAG 2.1 AA compliance</li> <li>Screen reader compatibility</li> <li>Keyboard navigation</li> <li>Color contrast compliance</li> </ul>"},{"location":"projectbrief/#success-criteria","title":"Success Criteria","text":"<ol> <li>System meets all functional and non-functional requirements</li> <li>User acceptance testing passes with 90%+ approval</li> <li>Performance metrics meet or exceed targets</li> <li>Security audit passes with no critical findings</li> <li>System can be deployed and maintained with documented procedures</li> </ol>"},{"location":"projectbrief/#risks-and-mitigations","title":"Risks and Mitigations","text":"Risk Probability Impact Mitigation Integration challenges with legacy systems Medium High Early prototyping, thorough testing, fallback options Performance issues with large datasets Medium High Performance testing early, optimization strategies, database indexing User adoption resistance Medium Medium Intuitive UI, comprehensive training, gradual rollout Regulatory compliance gaps Low High Regular compliance reviews, external audit Security vulnerabilities Medium High Security by design, regular penetration testing, prompt patching"},{"location":"projectbrief/#stakeholders","title":"Stakeholders","text":"<ol> <li>Broadcasting Management Team: Primary decision makers</li> <li>Content Creators: Provide content for broadcasting</li> <li>Technical Operations: Manage the technical infrastructure</li> <li>IT Department: Support system integration and maintenance</li> <li>Regulatory Compliance: Ensure adherence to broadcasting regulations</li> <li>Viewers/Listeners: End consumers of broadcast content</li> </ol>"},{"location":"projectbrief/#assumptions","title":"Assumptions","text":"<ol> <li>Access to existing broadcast systems for integration</li> <li>Availability of technical staff for implementation and support</li> <li>Sufficient server infrastructure for deployment</li> <li>Stakeholder availability for requirements validation and testing</li> </ol>"},{"location":"backend/api-endpoints/","title":"API Endpoints Design","text":""},{"location":"backend/api-endpoints/#overview","title":"Overview","text":"<p>This document outlines the REST API endpoints that will be implemented for the Broadcast Management System backend. The API is designed to match the expectations of the existing frontend application.</p>"},{"location":"backend/api-endpoints/#base-url","title":"Base URL","text":"<p>All API endpoints will be prefixed with <code>/api/</code>.</p>"},{"location":"backend/api-endpoints/#authentication-endpoints","title":"Authentication Endpoints","text":""},{"location":"backend/api-endpoints/#user-authentication","title":"User Authentication","text":"Endpoint Method Description Request Body Response <code>/api/auth/login/</code> POST Authenticate user <code>{ \"username\": string, \"password\": string }</code> User object with auth token <code>/api/auth/logout/</code> POST Log out user None <code>{ \"detail\": \"Successfully logged out\" }</code> <code>/api/auth/user/</code> GET Get current authenticated user None User object <code>/api/csrf/</code> GET Get CSRF token None <code>{ \"csrfToken\": string }</code>"},{"location":"backend/api-endpoints/#user-and-profile-management","title":"User and Profile Management","text":""},{"location":"backend/api-endpoints/#users","title":"Users","text":"Endpoint Method Description Request Body Response <code>/api/users/</code> GET List users None List of user objects with pagination <code>/api/users/:id/</code> GET Get user details None User object <code>/api/users/:id/</code> PATCH Update user User fields to update Updated user object"},{"location":"backend/api-endpoints/#profiles","title":"Profiles","text":"Endpoint Method Description Request Body Response <code>/api/profiles/</code> GET List profiles None List of profile objects with pagination <code>/api/profiles/:id/</code> GET Get profile details None Profile object <code>/api/profiles/</code> POST Create profile Profile fields Created profile object <code>/api/profiles/:id/</code> PATCH Update profile Profile fields to update Updated profile object"},{"location":"backend/api-endpoints/#location-management","title":"Location Management","text":""},{"location":"backend/api-endpoints/#locations","title":"Locations","text":"Endpoint Method Description Request Body Response <code>/api/locations/</code> GET List locations None List of location objects with pagination <code>/api/locations/:id/</code> GET Get location details None Location object <code>/api/locations/</code> POST Create location Location fields Created location object <code>/api/locations/:id/</code> PATCH Update location Location fields to update Updated location object"},{"location":"backend/api-endpoints/#facilities","title":"Facilities","text":"Endpoint Method Description Request Body Response <code>/api/facilities/</code> GET List facilities None List of facility objects with pagination <code>/api/facilities/:id/</code> GET Get facility details None Facility object <code>/api/facilities/</code> POST Create facility Facility fields Created facility object <code>/api/facilities/:id/</code> PATCH Update facility Facility fields to update Updated facility object"},{"location":"backend/api-endpoints/#shift-management","title":"Shift Management","text":""},{"location":"backend/api-endpoints/#shifts","title":"Shifts","text":"Endpoint Method Description Request Body Response <code>/api/shifts/</code> GET List shifts None List of shift objects <code>/api/shifts/:id/</code> GET Get shift details None Shift object <code>/api/shifts/</code> POST Create shift Shift fields Created shift object <code>/api/shifts/:id/</code> PATCH Update shift Shift fields to update Updated shift object"},{"location":"backend/api-endpoints/#time-tracking","title":"Time Tracking","text":""},{"location":"backend/api-endpoints/#time-entries","title":"Time Entries","text":"Endpoint Method Description Request Body Response <code>/api/time-entries/</code> GET List time entries Optional: <code>?user=id</code> List of time entry objects with pagination <code>/api/time-entries/:id/</code> GET Get time entry details None Time entry object <code>/api/time-entries/</code> POST Create time entry Time entry fields Created time entry object <code>/api/time-entries/:id/</code> PATCH Update time entry Time entry fields to update Updated time entry object"},{"location":"backend/api-endpoints/#time-off-requests","title":"Time Off Requests","text":"Endpoint Method Description Request Body Response <code>/api/time-off-requests/</code> GET List time off requests Optional: <code>?user=id</code> List of time off request objects with pagination <code>/api/time-off-requests/:id/</code> GET Get time off request details None Time off request object <code>/api/time-off-requests/</code> POST Create time off request Time off request fields Created time off request object <code>/api/time-off-requests/:id/</code> PATCH Update time off request Time off request fields to update Updated time off request object"},{"location":"backend/api-endpoints/#scheduling","title":"Scheduling","text":""},{"location":"backend/api-endpoints/#scheduled-events","title":"Scheduled Events","text":"Endpoint Method Description Request Body Response <code>/api/scheduled-events/</code> GET List scheduled events Optional: <code>?start_date=yyyy-mm-dd&amp;end_date=yyyy-mm-dd</code> List of scheduled event objects with pagination <code>/api/scheduled-events/:id/</code> GET Get scheduled event details None Scheduled event object <code>/api/scheduled-events/</code> POST Create scheduled event Scheduled event fields Created scheduled event object <code>/api/scheduled-events/:id/</code> PATCH Update scheduled event Scheduled event fields to update Updated scheduled event object <code>/api/scheduled-events/:id/</code> DELETE Delete scheduled event None <code>{ \"detail\": \"Event deleted\" }</code>"},{"location":"backend/api-endpoints/#incident-management","title":"Incident Management","text":""},{"location":"backend/api-endpoints/#incident-types","title":"Incident Types","text":"Endpoint Method Description Request Body Response <code>/api/incident-types/</code> GET List incident types None List of incident type objects <code>/api/incident-types/:id/</code> GET Get incident type details None Incident type object <code>/api/incident-types/</code> POST Create incident type Incident type fields Created incident type object <code>/api/incident-types/:id/</code> PATCH Update incident type Incident type fields to update Updated incident type object"},{"location":"backend/api-endpoints/#incident-tickets","title":"Incident Tickets","text":"Endpoint Method Description Request Body Response <code>/api/incident-tickets/</code> GET List incident tickets Optional: <code>?status=new</code> List of incident ticket objects with pagination <code>/api/incident-tickets/:id/</code> GET Get incident ticket details None Incident ticket object <code>/api/incident-tickets/</code> POST Create incident ticket Incident ticket fields Created incident ticket object <code>/api/incident-tickets/:id/</code> PATCH Update incident ticket Incident ticket fields to update Updated incident ticket object"},{"location":"backend/api-endpoints/#service-management","title":"Service Management","text":""},{"location":"backend/api-endpoints/#service-tickets","title":"Service Tickets","text":"Endpoint Method Description Request Body Response <code>/api/service-tickets/</code> GET List service tickets Optional: <code>?status=new</code> List of service ticket objects with pagination <code>/api/service-tickets/:id/</code> GET Get service ticket details None Service ticket object <code>/api/service-tickets/</code> POST Create service ticket Service ticket fields Created service ticket object <code>/api/service-tickets/:id/</code> PATCH Update service ticket Service ticket fields to update Updated service ticket object"},{"location":"backend/api-endpoints/#equipment-management","title":"Equipment Management","text":""},{"location":"backend/api-endpoints/#equipment-categories","title":"Equipment Categories","text":"Endpoint Method Description Request Body Response <code>/api/equipment-categories/</code> GET List equipment categories None List of equipment category objects <code>/api/equipment-categories/:id/</code> GET Get equipment category details None Equipment category object <code>/api/equipment-categories/</code> POST Create equipment category Equipment category fields Created equipment category object <code>/api/equipment-categories/:id/</code> PATCH Update equipment category Equipment category fields to update Updated equipment category object"},{"location":"backend/api-endpoints/#equipment","title":"Equipment","text":"Endpoint Method Description Request Body Response <code>/api/equipment/</code> GET List equipment Optional: <code>?status=available</code> List of equipment objects with pagination <code>/api/equipment/:id/</code> GET Get equipment details None Equipment object <code>/api/equipment/</code> POST Create equipment Equipment fields Created equipment object <code>/api/equipment/:id/</code> PATCH Update equipment Equipment fields to update Updated equipment object"},{"location":"backend/api-endpoints/#communication","title":"Communication","text":""},{"location":"backend/api-endpoints/#comments","title":"Comments","text":"Endpoint Method Description Request Body Response <code>/api/comments/</code> GET List comments Required: <code>?content_type=id&amp;object_id=id</code> List of comment objects <code>/api/comments/:id/</code> GET Get comment details None Comment object <code>/api/comments/</code> POST Create comment Comment fields including content type and object ID Created comment object <code>/api/comments/:id/</code> PATCH Update comment Comment fields to update Updated comment object <code>/api/comments/:id/</code> DELETE Delete comment None <code>{ \"detail\": \"Comment deleted\" }</code>"},{"location":"backend/api-endpoints/#notifications","title":"Notifications","text":"Endpoint Method Description Request Body Response <code>/api/notifications/</code> GET List notifications for current user Optional: <code>?is_read=false</code> List of notification objects with pagination <code>/api/notifications/:id/</code> GET Get notification details None Notification object <code>/api/notifications/:id/mark-read/</code> POST Mark notification as read None Updated notification object <code>/api/notifications/mark-all-read/</code> POST Mark all notifications as read None <code>{ \"detail\": \"All notifications marked as read\" }</code>"},{"location":"backend/api-endpoints/#utility-endpoints","title":"Utility Endpoints","text":""},{"location":"backend/api-endpoints/#email","title":"Email","text":"Endpoint Method Description Request Body Response <code>/api/send-email/</code> POST Send email <code>{ \"to\": [string], \"subject\": string, \"message\": string, \"html\": string }</code> <code>{ \"detail\": \"Email sent\" }</code>"},{"location":"backend/api-endpoints/#response-format","title":"Response Format","text":""},{"location":"backend/api-endpoints/#successful-responses","title":"Successful Responses","text":"<p>For list endpoints, the response format will be:</p> <pre><code>{\n  \"count\": 100,\n  \"next\": \"http://example.com/api/users/?page=2\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"id\": 1,\n      \"username\": \"user1\",\n      // other fields...\n    },\n    // more items...\n  ]\n}\n</code></pre> <p>For detail endpoints, the response will be the object itself:</p> <pre><code>{\n  \"id\": 1,\n  \"username\": \"user1\",\n  // other fields...\n}\n</code></pre>"},{"location":"backend/api-endpoints/#error-responses","title":"Error Responses","text":"<p>Error responses will follow this format:</p> <pre><code>{\n  \"detail\": \"Error message\",\n  \"code\": \"error_code\"\n}\n</code></pre> <p>For validation errors:</p> <pre><code>{\n  \"field1\": [\"Error message 1\", \"Error message 2\"],\n  \"field2\": [\"Error message 3\"]\n}\n</code></pre>"},{"location":"backend/api-endpoints/#filtering-and-pagination","title":"Filtering and Pagination","text":"<p>Most list endpoints will support:</p> <ol> <li>Pagination - Via query parameters <code>?page=1&amp;page_size=10</code></li> <li>Filtering - Via field-specific query parameters (e.g., <code>?status=active</code>)</li> <li>Searching - Via a search parameter <code>?search=term</code></li> <li>Ordering - Via an ordering parameter <code>?ordering=field</code> or <code>?ordering=-field</code> for descending</li> </ol>"},{"location":"backend/api-endpoints/#authentication-and-permissions","title":"Authentication and Permissions","text":"<p>The API will use Django's session-based authentication with CSRF protection. All API endpoints except for login and CSRF token will require authentication.</p> <p>Permissions will be role-based, following these general rules:</p> <ol> <li>Administrators - Full access to all endpoints</li> <li>Managers - Access to most endpoints with some restrictions on sensitive operations</li> <li>Schedulers - Access to scheduling-related endpoints and read access to most other data</li> <li>Operators - Limited access primarily to endpoints related to their own data and operations</li> </ol>"},{"location":"backend/api-endpoints/#api-versioning","title":"API Versioning","text":"<p>The API will be versioned to allow for future changes without breaking existing clients. Initially, version 1 will be implicit, but future versions may use an explicit version prefix (e.g., <code>/api/v2/</code>).</p>"},{"location":"backend/api-endpoints/#rate-limiting","title":"Rate Limiting","text":"<p>Rate limiting will be applied to prevent abuse:</p> <ol> <li>Anonymous users - 20 requests per minute</li> <li>Authenticated users - 60 requests per minute</li> <li>Staff users - 120 requests per minute</li> </ol>"},{"location":"backend/api-endpoints/#example-requests-and-responses","title":"Example Requests and Responses","text":""},{"location":"backend/api-endpoints/#login-example","title":"Login Example","text":"<p>Request: <pre><code>POST /api/auth/login/\nContent-Type: application/json\n\n{\n  \"username\": \"john.doe\",\n  \"password\": \"securepassword\"\n}\n</code></pre></p> <p>Response: <pre><code>Status: 200 OK\nContent-Type: application/json\n\n{\n  \"id\": 1,\n  \"username\": \"john.doe\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"is_active\": true\n}\n</code></pre></p>"},{"location":"backend/api-endpoints/#creating-a-time-entry-example","title":"Creating a Time Entry Example","text":"<p>Request: <pre><code>POST /api/time-entries/\nContent-Type: application/json\nX-CSRFToken: abcdef123456\n\n{\n  \"date\": \"2023-07-15\",\n  \"start_time\": \"09:00:00\",\n  \"end_time\": \"17:30:00\",\n  \"shift\": 2,\n  \"notes\": \"Regular workday\"\n}\n</code></pre></p> <p>Response: <pre><code>Status: 201 Created\nContent-Type: application/json\n\n{\n  \"id\": 42,\n  \"user\": {\n    \"id\": 1,\n    \"username\": \"john.doe\",\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\"\n  },\n  \"date\": \"2023-07-15\",\n  \"start_time\": \"09:00:00\",\n  \"end_time\": \"17:30:00\",\n  \"shift\": 2,\n  \"notes\": \"Regular workday\",\n  \"status\": \"pending\",\n  \"created_at\": \"2023-07-15T17:35:22Z\",\n  \"updated_at\": \"2023-07-15T17:35:22Z\"\n}\n</code></pre></p>"},{"location":"backend/api-endpoints/#api-documentation","title":"API Documentation","text":"<p>The API will be documented using drf-yasg (Yet Another Swagger Generator) which provides an interactive API documentation interface based on Swagger/OpenAPI.</p> <p>The documentation will be available at:</p> <ul> <li><code>/api/docs/</code> - Swagger UI for interactive documentation</li> <li><code>/api/redoc/</code> - ReDoc alternative documentation view</li> <li><code>/api/schema/</code> - OpenAPI schema in JSON format</li> </ul>"},{"location":"backend/api-endpoints/#conclusion","title":"Conclusion","text":"<p>This API design provides a comprehensive foundation for the Broadcast Management System backend. The endpoints are structured to support the existing frontend application while following RESTful best practices. The authentication system and permission controls ensure secure access to the system's functionality. </p>"},{"location":"backend/architecture/","title":"Backend Implementation Plan","text":""},{"location":"backend/architecture/#overview","title":"Overview","text":"<p>This document outlines the detailed plan for implementing a Django-based backend with PostgreSQL database for the Broadcast Management System. The backend will be containerized using Docker to ensure consistent development and deployment environments.</p>"},{"location":"backend/architecture/#architecture","title":"Architecture","text":"<pre><code>graph TD\n    FE[Frontend React App]\n    BE[Django Backend]\n    DB[(PostgreSQL)]\n    CL[Celery Workers]\n    RD[(Redis)]\n\n    FE --&gt;|API Requests| BE\n    BE --&gt;|Database Queries| DB\n    BE --&gt;|Queue Tasks| RD\n    RD --&gt;|Process Tasks| CL\n    CL --&gt;|Database Operations| DB\n\n    style FE fill:#88c0d0\n    style BE fill:#8fbcbb\n    style DB fill:#81a1c1\n    style CL fill:#a3be8c\n    style RD fill:#b48ead</code></pre>"},{"location":"backend/architecture/#components","title":"Components","text":"<ol> <li>Frontend: React application (existing)</li> <li>Will remain separate initially</li> <li> <p>Will connect to the containerized backend API</p> </li> <li> <p>Backend: Django with Django REST Framework</p> </li> <li>Containerized with Docker</li> <li> <p>RESTful API endpoints matching current frontend expectations</p> </li> <li> <p>Database: PostgreSQL</p> </li> <li>Containerized with Docker</li> <li> <p>Persistent volume for data storage</p> </li> <li> <p>Task Queue: Celery (optional for initial phase)</p> </li> <li> <p>For background processing and scheduled tasks</p> </li> <li> <p>Message Broker: Redis</p> </li> <li>For caching and message queueing</li> <li>Required for Celery if implemented</li> </ol>"},{"location":"backend/architecture/#implementation-phases","title":"Implementation Phases","text":""},{"location":"backend/architecture/#phase-1-docker-infrastructure-setup-1-2-weeks","title":"Phase 1: Docker Infrastructure Setup (1-2 weeks)","text":""},{"location":"backend/architecture/#objectives","title":"Objectives","text":"<ul> <li>Set up Docker development environment</li> <li>Configure Docker Compose for local development</li> <li>Ensure proper communication between services</li> </ul>"},{"location":"backend/architecture/#tasks","title":"Tasks","text":"<ol> <li>Docker Configuration</li> <li>Create Dockerfile for Django application</li> <li>Set up docker-compose.yml with all required services</li> <li>Configure environment variables and secrets management</li> <li>Set up development and production configurations</li> <li> <p>Configure persistent volumes for database</p> </li> <li> <p>Environment Setup</p> </li> <li>Create development, staging, and production environment configurations</li> <li>Set up environment variable management</li> <li> <p>Configure logging for containers</p> </li> <li> <p>Testing Infrastructure</p> </li> <li>Set up container health checks</li> <li>Create Docker test environment</li> <li>Configure CI/CD pipeline integration points</li> </ol>"},{"location":"backend/architecture/#phase-2-django-backend-implementation-3-4-weeks","title":"Phase 2: Django Backend Implementation (3-4 weeks)","text":""},{"location":"backend/architecture/#objectives_1","title":"Objectives","text":"<ul> <li>Develop Django application structure</li> <li>Implement database models</li> <li>Create API endpoints matching frontend expectations</li> </ul>"},{"location":"backend/architecture/#tasks_1","title":"Tasks","text":"<ol> <li>Project Setup</li> <li>Initialize Django project with appropriate structure</li> <li>Configure Django REST Framework</li> <li>Set up database connection to PostgreSQL</li> <li> <p>Configure static and media files handling</p> </li> <li> <p>Authentication System</p> </li> <li>Implement JWT or session-based authentication matching frontend</li> <li>Configure CSRF protection compatible with frontend</li> <li>Set up permission classes for different user roles</li> <li> <p>Create user model and profile extensions</p> </li> <li> <p>Database Models</p> </li> <li> <p>Create models for all entities required by the frontend:</p> <ul> <li>User and Profile models</li> <li>Locations and Facilities</li> <li>Shifts and scheduling data</li> <li>Tickets (Incident and Service)</li> <li>Time entries and scheduling</li> <li>Events and notifications</li> </ul> </li> <li> <p>API Development</p> </li> <li>Create serializers for all models</li> <li>Implement viewsets and URL routing</li> <li>Ensure pagination matches frontend expectations</li> <li>Set up filtering and search capabilities</li> <li> <p>Document API endpoints with drf-yasg or similar</p> </li> <li> <p>Background Tasks (if needed)</p> </li> <li>Configure Celery for asynchronous tasks</li> <li>Implement scheduled tasks for recurring operations</li> <li>Set up result backend and monitoring</li> </ol>"},{"location":"backend/architecture/#phase-3-integration-and-testing-2-3-weeks","title":"Phase 3: Integration and Testing (2-3 weeks)","text":""},{"location":"backend/architecture/#objectives_2","title":"Objectives","text":"<ul> <li>Ensure backend API works with existing frontend</li> <li>Test all functionality thoroughly</li> <li>Document API for frontend developers</li> </ul>"},{"location":"backend/architecture/#tasks_2","title":"Tasks","text":"<ol> <li>API Verification</li> <li>Ensure all endpoints match frontend expectations</li> <li>Test authentication flow</li> <li>Verify CRUD operations for all entities</li> <li> <p>Test pagination and filtering</p> </li> <li> <p>Integration Testing</p> </li> <li>Update frontend API configuration to point to new backend</li> <li>Test all frontend features against new backend</li> <li> <p>Address any compatibility issues</p> </li> <li> <p>Performance Testing</p> </li> <li>Load test API endpoints</li> <li>Optimize database queries</li> <li>Implement caching where appropriate</li> <li> <p>Monitor and tune database performance</p> </li> <li> <p>Documentation</p> </li> <li>Create comprehensive API documentation</li> <li>Document setup and deployment procedures</li> <li>Create development guides for future contributors</li> </ol>"},{"location":"backend/architecture/#phase-4-deployment-and-monitoring-1-2-weeks","title":"Phase 4: Deployment and Monitoring (1-2 weeks)","text":""},{"location":"backend/architecture/#objectives_3","title":"Objectives","text":"<ul> <li>Deploy backend to production environment</li> <li>Set up monitoring and alerting</li> <li>Establish backup procedures</li> </ul>"},{"location":"backend/architecture/#tasks_3","title":"Tasks","text":"<ol> <li>Production Deployment</li> <li>Configure production Docker environment</li> <li>Set up container orchestration (if needed)</li> <li>Implement HTTPS with proper certificates</li> <li> <p>Configure database backup procedures</p> </li> <li> <p>Monitoring Setup</p> </li> <li>Implement application monitoring</li> <li>Set up error tracking</li> <li>Configure performance monitoring</li> <li> <p>Create alerting for critical issues</p> </li> <li> <p>Maintenance Planning</p> </li> <li>Document update procedures</li> <li>Plan for database migrations</li> <li>Set up automated backups</li> <li>Create disaster recovery procedures</li> </ol>"},{"location":"backend/architecture/#technical-details","title":"Technical Details","text":""},{"location":"backend/architecture/#docker-configuration","title":"Docker Configuration","text":"<pre><code># Example docker-compose.yml structure\nversion: '3.8'\n\nservices:\n  db:\n    image: postgres:14\n    volumes:\n      - postgres_data:/var/lib/postgresql/data/\n    env_file:\n      - ./.env.db\n    ports:\n      - \"5432:5432\"\n    networks:\n      - backend-network\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  redis:\n    image: redis:alpine\n    ports:\n      - \"6379:6379\"\n    networks:\n      - backend-network\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"ping\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  web:\n    build: ./backend\n    command: gunicorn backend.wsgi:application --bind 0.0.0.0:8000\n    volumes:\n      - ./backend:/app\n      - static_volume:/app/staticfiles\n      - media_volume:/app/mediafiles\n    env_file:\n      - ./.env.dev\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      - db\n      - redis\n    networks:\n      - backend-network\n    restart: unless-stopped\n\n  celery:\n    build: ./backend\n    command: celery -A backend worker -l INFO\n    volumes:\n      - ./backend:/app\n    env_file:\n      - ./.env.dev\n    depends_on:\n      - web\n      - redis\n      - db\n    networks:\n      - backend-network\n    restart: unless-stopped\n\n  celery-beat:\n    build: ./backend\n    command: celery -A backend beat -l INFO\n    volumes:\n      - ./backend:/app\n    env_file:\n      - ./.env.dev\n    depends_on:\n      - web\n      - redis\n      - db\n    networks:\n      - backend-network\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n  static_volume:\n  media_volume:\n\nnetworks:\n  backend-network:\n    driver: bridge\n</code></pre>"},{"location":"backend/architecture/#django-models","title":"Django Models","text":"<pre><code># Example User Profile model\nfrom django.db import models\nfrom django.contrib.auth.models import User\n\nclass Profile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')\n    title = models.CharField(max_length=100, blank=True)\n    department = models.CharField(max_length=100, blank=True)\n    phone = models.CharField(max_length=20, blank=True)\n    location = models.ForeignKey('Location', on_delete=models.SET_NULL, null=True, blank=True)\n    profile_image = models.ImageField(upload_to='profiles/', null=True, blank=True)\n\n    def __str__(self):\n        return f\"{self.user.username}'s profile\"\n</code></pre>"},{"location":"backend/architecture/#api-endpoints","title":"API Endpoints","text":"<p>The backend will implement the following API endpoints to match the frontend expectations:</p> <ol> <li>Authentication</li> <li><code>POST /api/auth/login/</code> - Log in user</li> <li><code>POST /api/auth/logout/</code> - Log out user</li> <li> <p><code>GET /api/auth/user/</code> - Get current user</p> </li> <li> <p>Users and Profiles</p> </li> <li><code>GET /api/profiles/</code> - List all profiles</li> <li><code>GET /api/profiles/:id/</code> - Get specific profile</li> <li><code>POST /api/profiles/</code> - Create profile</li> <li> <p><code>PATCH /api/profiles/:id/</code> - Update profile</p> </li> <li> <p>Locations and Facilities</p> </li> <li><code>GET /api/locations/</code> - List locations</li> <li><code>POST /api/locations/</code> - Create location</li> <li><code>GET /api/facilities/</code> - List facilities</li> <li> <p><code>POST /api/facilities/</code> - Create facility</p> </li> <li> <p>Shifts</p> </li> <li><code>GET /api/shifts/</code> - List shifts</li> <li> <p><code>POST /api/shifts/</code> - Create shift</p> </li> <li> <p>Incidents</p> </li> <li><code>GET /api/incident-types/</code> - List incident types</li> <li><code>GET /api/incident-tickets/</code> - List incident tickets</li> <li><code>GET /api/incident-tickets/:id/</code> - Get specific incident ticket</li> <li><code>POST /api/incident-tickets/</code> - Create incident ticket</li> <li> <p><code>PATCH /api/incident-tickets/:id/</code> - Update incident ticket</p> </li> <li> <p>Service</p> </li> <li><code>GET /api/service-tickets/</code> - List service tickets</li> <li><code>GET /api/service-tickets/:id/</code> - Get specific service ticket</li> <li><code>POST /api/service-tickets/</code> - Create service ticket</li> <li> <p><code>PATCH /api/service-tickets/:id/</code> - Update service ticket</p> </li> <li> <p>Time Entries</p> </li> <li><code>GET /api/time-entries/</code> - List time entries</li> <li><code>POST /api/time-entries/</code> - Create time entry</li> <li> <p><code>PATCH /api/time-entries/:id/</code> - Update time entry</p> </li> <li> <p>Scheduling</p> </li> <li><code>GET /api/scheduled-events/</code> - List scheduled events</li> <li><code>POST /api/scheduled-events/</code> - Create scheduled event</li> <li><code>PATCH /api/scheduled-events/:id/</code> - Update scheduled event</li> <li><code>GET /api/time-off-requests/</code> - List time-off requests</li> <li><code>POST /api/time-off-requests/</code> - Create time-off request</li> <li> <p><code>PATCH /api/time-off-requests/:id/</code> - Update time-off request</p> </li> <li> <p>Utilities</p> </li> <li><code>POST /api/send-email/</code> - Send email</li> <li><code>GET /api/csrf/</code> - Get CSRF token</li> </ol>"},{"location":"backend/architecture/#authentication-system","title":"Authentication System","text":"<p>The backend will implement session-based authentication with CSRF token support to match the existing frontend authentication flow:</p> <ol> <li>Login Process</li> <li>Frontend sends credentials to backend</li> <li>Backend verifies credentials and creates session</li> <li>Backend returns user information</li> <li> <p>Frontend stores user information in context</p> </li> <li> <p>Session Management</p> </li> <li>Sessions stored in database</li> <li>Redis for caching sessions (optional)</li> <li> <p>CSRF protection for all non-GET requests</p> </li> <li> <p>Permission System</p> </li> <li>Role-based permissions matching frontend expectations</li> <li>Object-level permissions where needed</li> <li>Permission checks in all relevant API endpoints</li> </ol>"},{"location":"backend/architecture/#development-workflow","title":"Development Workflow","text":""},{"location":"backend/architecture/#local-development","title":"Local Development","text":"<ol> <li>Clone repository</li> <li>Copy <code>.env.example</code> to <code>.env.dev</code> and configure</li> <li>Run <code>docker-compose up -d</code></li> <li>Access Django at <code>http://localhost:8000</code></li> <li>Access frontend separately (not containerized initially)</li> </ol>"},{"location":"backend/architecture/#testing","title":"Testing","text":"<ol> <li>Unit tests for models and serializers</li> <li>Integration tests for API endpoints</li> <li>End-to-end tests with frontend</li> </ol>"},{"location":"backend/architecture/#code-standards","title":"Code Standards","text":"<ol> <li>PEP 8 for Python code</li> <li>Comprehensive documentation</li> <li>Type hints where applicable</li> <li>Thorough test coverage</li> </ol>"},{"location":"backend/architecture/#risk-management","title":"Risk Management","text":""},{"location":"backend/architecture/#potential-challenges","title":"Potential Challenges","text":"<ol> <li>Authentication Compatibility</li> <li>Risk: Frontend authentication flow may not match backend implementation</li> <li> <p>Mitigation: Carefully review frontend auth code and implement matching backend system</p> </li> <li> <p>API Contract Matching</p> </li> <li>Risk: Backend API responses may not match frontend expectations</li> <li> <p>Mitigation: Test each endpoint thoroughly with frontend, ensure pagination and response formats match</p> </li> <li> <p>Performance Issues</p> </li> <li>Risk: Database queries may not be optimized for performance</li> <li> <p>Mitigation: Implement query optimization, caching, and monitoring</p> </li> <li> <p>Data Migration</p> </li> <li>Risk: Moving from mock data to real database may reveal data inconsistencies</li> <li>Mitigation: Create robust data validation and migration scripts</li> </ol>"},{"location":"backend/architecture/#future-considerations","title":"Future Considerations","text":"<ol> <li>Frontend Containerization</li> <li>Containerize frontend in future phases</li> <li> <p>Implement unified docker-compose setup</p> </li> <li> <p>Scaling Strategy</p> </li> <li>Horizontal scaling for Django application</li> <li>Database replication and sharding</li> <li> <p>Load balancing configuration</p> </li> <li> <p>Enhanced Security</p> </li> <li>Security auditing procedures</li> <li>Penetration testing</li> <li> <p>Regular dependency updates</p> </li> <li> <p>Advanced Features</p> </li> <li>Real-time notifications with WebSockets</li> <li>Enhanced reporting capabilities</li> <li>AI-powered scheduling recommendations</li> </ol>"},{"location":"backend/architecture/#conclusion","title":"Conclusion","text":"<p>This implementation plan provides a structured approach to developing a Django backend with PostgreSQL that works seamlessly with the existing frontend. By following this plan, we'll ensure that the backend respects the current API contract while providing a robust, containerized solution that can scale for future needs. </p>"},{"location":"backend/authentication/","title":"Backend Authentication","text":"<p>This document covers the planned authentication system for the Django backend, designed to seamlessly integrate with the existing frontend authentication patterns while providing robust security and session management.</p>"},{"location":"backend/authentication/#overview","title":"Overview","text":"<p>The backend authentication system uses Django's built-in session framework enhanced with custom views and response formatting to ensure exact compatibility with the frontend API expectations. This approach provides enterprise-grade security while maintaining the existing frontend authentication flow without requiring any frontend modifications.</p>"},{"location":"backend/authentication/#architecture","title":"Architecture","text":"<pre><code>graph TD\n    Frontend[React Frontend] --&gt; CSRF[CSRF Token Request]\n    CSRF --&gt; Django[Django Backend]\n    Django --&gt; CSRFResponse[CSRF Token Response]\n\n    Frontend --&gt; Login[Login Request]\n    Login --&gt; CustomAuth[Custom Auth Views]\n    CustomAuth --&gt; DjangoAuth[Django Authentication]\n    DjangoAuth --&gt; Session[Session Creation]\n    Session --&gt; Profile[Profile Retrieval]\n    Profile --&gt; Response[Formatted Response]\n    Response --&gt; Frontend\n\n    Frontend --&gt; Protected[Protected Requests]\n    Protected --&gt; SessionCheck[Session Validation]\n    SessionCheck --&gt; Middleware[Django Middleware]\n    Middleware --&gt; Views[Protected Views]\n    Views --&gt; Data[Data Response]\n    Data --&gt; Frontend\n\n    subgraph \"Security Layer\"\n        CSRF_Middleware[CSRF Middleware]\n        Session_Middleware[Session Middleware]\n        Auth_Middleware[Auth Middleware]\n        Audit[Audit Logging]\n    end\n\n    Django --&gt; CSRF_Middleware\n    Django --&gt; Session_Middleware\n    Django --&gt; Auth_Middleware\n    Django --&gt; Audit\n\n    style CustomAuth fill:#4da6ff\n    style Session fill:#52c41a\n    style Security fill:#ff7875</code></pre>"},{"location":"backend/authentication/#authentication-strategy","title":"Authentication Strategy","text":"<p>Based on the creative phase decision, the backend implements Hybrid Session Auth with Custom Response Layer:</p>"},{"location":"backend/authentication/#key-components","title":"Key Components","text":"<ol> <li>Django Session Framework: Core authentication mechanism</li> <li>Custom Authentication Views: Frontend-compatible response formatting</li> <li>CSRF Protection: Django's CSRF middleware for request security</li> <li>Profile Integration: Automatic profile data retrieval</li> <li>Audit Logging: Security event tracking</li> </ol>"},{"location":"backend/authentication/#design-principles","title":"Design Principles","text":"<ul> <li>Frontend Compatibility: Zero frontend changes required</li> <li>Security First: Enterprise-grade security practices</li> <li>Performance Optimized: Efficient session and profile handling</li> <li>Audit Ready: Comprehensive logging for compliance</li> <li>Scalable: Designed for future horizontal scaling</li> </ul>"},{"location":"backend/authentication/#custom-authentication-views","title":"Custom Authentication Views","text":""},{"location":"backend/authentication/#csrf-token-endpoint","title":"CSRF Token Endpoint","text":"<pre><code>from django.http import JsonResponse\nfrom django.middleware.csrf import get_token\nfrom django.views.decorators.http import require_http_methods\n\n@require_http_methods([\"GET\"])\ndef csrf_token_view(request):\n    \"\"\"\n    Provides CSRF token for frontend authentication.\n    Frontend expects: { \"csrfToken\": \"token_value\" }\n    \"\"\"\n    token = get_token(request)\n    return JsonResponse({\n        'csrfToken': token\n    })\n</code></pre>"},{"location":"backend/authentication/#login-view","title":"Login View","text":"<pre><code>from django.contrib.auth import authenticate, login\nfrom django.contrib.auth.models import User\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_protect\nfrom django.views.decorators.http import require_http_methods\nfrom django.utils.decorators import method_decorator\nfrom django.views import View\nimport json\n\n@method_decorator(csrf_protect, name='dispatch')\nclass LoginView(View):\n    def post(self, request):\n        \"\"\"\n        Custom login view that matches frontend expectations.\n        Frontend expects DjangoUser object response.\n        \"\"\"\n        try:\n            data = json.loads(request.body)\n            username = data.get('username')\n            password = data.get('password')\n\n            if not username or not password:\n                return JsonResponse({\n                    'detail': 'Username and password are required'\n                }, status=400)\n\n            # Authenticate user\n            user = authenticate(request, username=username, password=password)\n\n            if user is not None:\n                if user.is_active:\n                    # Log in the user (creates session)\n                    login(request, user)\n\n                    # Log authentication event\n                    audit_log_login(user, request)\n\n                    # Return user data in expected format\n                    return JsonResponse({\n                        'id': user.id,\n                        'username': user.username,\n                        'email': user.email,\n                        'first_name': user.first_name,\n                        'last_name': user.last_name,\n                        'is_staff': user.is_staff,\n                        'is_active': user.is_active,\n                        'date_joined': user.date_joined.isoformat(),\n                        'last_login': user.last_login.isoformat() if user.last_login else None,\n                    })\n                else:\n                    return JsonResponse({\n                        'detail': 'Account is disabled'\n                    }, status=401)\n            else:\n                # Log failed attempt\n                audit_log_failed_login(username, request)\n\n                return JsonResponse({\n                    'detail': 'Invalid credentials'\n                }, status=401)\n\n        except json.JSONDecodeError:\n            return JsonResponse({\n                'detail': 'Invalid JSON data'\n            }, status=400)\n        except Exception as e:\n            # Log system error\n            audit_log_error('login_error', str(e), request)\n\n            return JsonResponse({\n                'detail': 'An error occurred during login'\n            }, status=500)\n</code></pre>"},{"location":"backend/authentication/#logout-view","title":"Logout View","text":"<pre><code>from django.contrib.auth import logout\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_protect\nfrom django.views.decorators.http import require_http_methods\n\n@csrf_protect\n@require_http_methods([\"POST\"])\ndef logout_view(request):\n    \"\"\"\n    Custom logout view with audit logging.\n    Frontend expects empty response with 200 status.\n    \"\"\"\n    if request.user.is_authenticated:\n        user = request.user\n        audit_log_logout(user, request)\n        logout(request)\n\n    return JsonResponse({})\n</code></pre>"},{"location":"backend/authentication/#current-user-view","title":"Current User View","text":"<pre><code>from django.http import JsonResponse\nfrom django.contrib.auth.decorators import login_required\nfrom django.views.decorators.http import require_http_methods\n\n@login_required\n@require_http_methods([\"GET\"])\ndef current_user_view(request):\n    \"\"\"\n    Returns current authenticated user data.\n    Frontend expects DjangoUser object format.\n    \"\"\"\n    user = request.user\n\n    return JsonResponse({\n        'id': user.id,\n        'username': user.username,\n        'email': user.email,\n        'first_name': user.first_name,\n        'last_name': user.last_name,\n        'is_staff': user.is_staff,\n        'is_active': user.is_active,\n        'date_joined': user.date_joined.isoformat(),\n        'last_login': user.last_login.isoformat() if user.last_login else None,\n    })\n</code></pre>"},{"location":"backend/authentication/#session-configuration","title":"Session Configuration","text":""},{"location":"backend/authentication/#django-settings","title":"Django Settings","text":"<pre><code># settings.py\n\n# Session Configuration\nSESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Database-backed sessions\nSESSION_COOKIE_AGE = 60 * 60 * 24 * 7  # 7 days\nSESSION_COOKIE_SECURE = True  # HTTPS only in production\nSESSION_COOKIE_HTTPONLY = True  # Prevent XSS\nSESSION_COOKIE_SAMESITE = 'Lax'  # CSRF protection\nSESSION_SAVE_EVERY_REQUEST = True  # Extend session on activity\nSESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Persistent sessions\n\n# CSRF Configuration\nCSRF_COOKIE_SECURE = True  # HTTPS only in production\nCSRF_COOKIE_HTTPONLY = False  # JavaScript needs access\nCSRF_COOKIE_SAMESITE = 'Lax'  # CSRF protection\nCSRF_TRUSTED_ORIGINS = [\n    'https://app.capparelli.ie',\n    'http://localhost:5173',  # Development frontend\n]\n\n# Authentication Configuration\nLOGIN_URL = '/api/auth/login/'\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/login'\n\n# Password Security\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n        'OPTIONS': {\n            'min_length': 8,\n        }\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Security Headers\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\n</code></pre>"},{"location":"backend/authentication/#middleware-stack","title":"Middleware Stack","text":"<pre><code># settings.py\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',  # For CORS handling\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'apps.authentication.middleware.AuditLogMiddleware',  # Custom audit logging\n]\n</code></pre>"},{"location":"backend/authentication/#profile-integration","title":"Profile Integration","text":""},{"location":"backend/authentication/#automatic-profile-retrieval","title":"Automatic Profile Retrieval","text":"<p>The authentication system automatically handles profile data to match frontend expectations:</p> <pre><code>from apps.users.models import Profile\n\ndef get_user_with_profile(user):\n    \"\"\"\n    Helper function to get user data with profile information.\n    Used in authentication views to provide complete user context.\n    \"\"\"\n    try:\n        profile = Profile.objects.get(user=user)\n        return {\n            'user': {\n                'id': user.id,\n                'username': user.username,\n                'email': user.email,\n                'first_name': user.first_name,\n                'last_name': user.last_name,\n                'is_staff': user.is_staff,\n                'is_active': user.is_active,\n                'date_joined': user.date_joined.isoformat(),\n                'last_login': user.last_login.isoformat() if user.last_login else None,\n            },\n            'profile': {\n                'id': profile.id,\n                'full_name': profile.full_name,\n                'email': profile.email,\n                'phone': profile.phone,\n                'position': profile.position,\n                'department': profile.department,\n                'start_date': profile.start_date.isoformat() if profile.start_date else None,\n                'status': profile.status,\n                'created_at': profile.created_at.isoformat(),\n                'updated_at': profile.updated_at.isoformat(),\n            }\n        }\n    except Profile.DoesNotExist:\n        return {\n            'user': {\n                'id': user.id,\n                'username': user.username,\n                'email': user.email,\n                'first_name': user.first_name,\n                'last_name': user.last_name,\n                'is_staff': user.is_staff,\n                'is_active': user.is_active,\n                'date_joined': user.date_joined.isoformat(),\n                'last_login': user.last_login.isoformat() if user.last_login else None,\n            },\n            'profile': None\n        }\n</code></pre>"},{"location":"backend/authentication/#security-features","title":"Security Features","text":""},{"location":"backend/authentication/#audit-logging","title":"Audit Logging","text":"<p>Comprehensive audit logging for security events:</p> <pre><code># apps/authentication/models.py\n\nfrom django.db import models\nfrom django.contrib.auth.models import User\nfrom django.utils import timezone\n\nclass AuditLog(models.Model):\n    EVENT_TYPES = [\n        ('login_success', 'Login Success'),\n        ('login_failed', 'Login Failed'),\n        ('logout', 'Logout'),\n        ('session_expired', 'Session Expired'),\n        ('password_change', 'Password Change'),\n        ('user_created', 'User Created'),\n        ('user_updated', 'User Updated'),\n        ('permission_denied', 'Permission Denied'),\n        ('system_error', 'System Error'),\n    ]\n\n    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)\n    event_type = models.CharField(max_length=50, choices=EVENT_TYPES)\n    timestamp = models.DateTimeField(default=timezone.now)\n    ip_address = models.GenericIPAddressField()\n    user_agent = models.TextField(blank=True)\n    details = models.JSONField(default=dict)\n    session_key = models.CharField(max_length=40, blank=True)\n\n    class Meta:\n        ordering = ['-timestamp']\n        indexes = [\n            models.Index(fields=['user', 'timestamp']),\n            models.Index(fields=['event_type', 'timestamp']),\n            models.Index(fields=['ip_address', 'timestamp']),\n        ]\n\n# Audit logging functions\ndef audit_log_login(user, request):\n    AuditLog.objects.create(\n        user=user,\n        event_type='login_success',\n        ip_address=get_client_ip(request),\n        user_agent=request.META.get('HTTP_USER_AGENT', ''),\n        session_key=request.session.session_key,\n        details={\n            'username': user.username,\n            'method': request.method,\n        }\n    )\n\ndef audit_log_failed_login(username, request):\n    AuditLog.objects.create(\n        event_type='login_failed',\n        ip_address=get_client_ip(request),\n        user_agent=request.META.get('HTTP_USER_AGENT', ''),\n        details={\n            'attempted_username': username,\n            'method': request.method,\n        }\n    )\n\ndef audit_log_logout(user, request):\n    AuditLog.objects.create(\n        user=user,\n        event_type='logout',\n        ip_address=get_client_ip(request),\n        user_agent=request.META.get('HTTP_USER_AGENT', ''),\n        session_key=request.session.session_key,\n        details={\n            'username': user.username,\n        }\n    )\n\ndef get_client_ip(request):\n    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')\n    if x_forwarded_for:\n        ip = x_forwarded_for.split(',')[0]\n    else:\n        ip = request.META.get('REMOTE_ADDR')\n    return ip\n</code></pre>"},{"location":"backend/authentication/#rate-limiting","title":"Rate Limiting","text":"<p>Protection against brute force attacks:</p> <pre><code># apps/authentication/middleware.py\n\nfrom django.core.cache import cache\nfrom django.http import JsonResponse\nfrom django.utils import timezone\nimport time\n\nclass RateLimitMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        if request.path == '/api/auth/login/' and request.method == 'POST':\n            client_ip = get_client_ip(request)\n            cache_key = f'login_attempts_{client_ip}'\n\n            attempts = cache.get(cache_key, 0)\n\n            if attempts &gt;= 5:  # Max 5 attempts\n                return JsonResponse({\n                    'detail': 'Too many login attempts. Please try again later.'\n                }, status=429)\n\n        response = self.get_response(request)\n\n        # Increment failed login attempts\n        if (request.path == '/api/auth/login/' and \n            request.method == 'POST' and \n            response.status_code == 401):\n\n            client_ip = get_client_ip(request)\n            cache_key = f'login_attempts_{client_ip}'\n            attempts = cache.get(cache_key, 0)\n            cache.set(cache_key, attempts + 1, 300)  # 5 minute lockout\n\n        # Clear attempts on successful login\n        elif (request.path == '/api/auth/login/' and \n              request.method == 'POST' and \n              response.status_code == 200):\n\n            client_ip = get_client_ip(request)\n            cache_key = f'login_attempts_{client_ip}'\n            cache.delete(cache_key)\n\n        return response\n</code></pre>"},{"location":"backend/authentication/#api-authentication-decorators","title":"API Authentication Decorators","text":""},{"location":"backend/authentication/#custom-authentication-decorators","title":"Custom Authentication Decorators","text":"<pre><code># apps/authentication/decorators.py\n\nfrom functools import wraps\nfrom django.http import JsonResponse\nfrom django.contrib.auth.decorators import login_required\n\ndef api_login_required(view_func):\n    \"\"\"\n    Custom login required decorator for API views.\n    Returns JSON response instead of redirecting.\n    \"\"\"\n    @wraps(view_func)\n    def wrapped_view(request, *args, **kwargs):\n        if not request.user.is_authenticated:\n            return JsonResponse({\n                'detail': 'Authentication required'\n            }, status=401)\n        return view_func(request, *args, **kwargs)\n    return wrapped_view\n\ndef staff_required(view_func):\n    \"\"\"\n    Requires user to be authenticated and staff member.\n    \"\"\"\n    @wraps(view_func)\n    @api_login_required\n    def wrapped_view(request, *args, **kwargs):\n        if not request.user.is_staff:\n            return JsonResponse({\n                'detail': 'Staff privileges required'\n            }, status=403)\n        return view_func(request, *args, **kwargs)\n    return wrapped_view\n\ndef department_required(department):\n    \"\"\"\n    Requires user to be in specific department.\n    \"\"\"\n    def decorator(view_func):\n        @wraps(view_func)\n        @api_login_required\n        def wrapped_view(request, *args, **kwargs):\n            try:\n                profile = request.user.profile\n                if profile.department != department:\n                    return JsonResponse({\n                        'detail': f'{department} department access required'\n                    }, status=403)\n            except:\n                return JsonResponse({\n                    'detail': 'Profile not found'\n                }, status=403)\n            return view_func(request, *args, **kwargs)\n        return wrapped_view\n    return decorator\n</code></pre>"},{"location":"backend/authentication/#url-configuration","title":"URL Configuration","text":""},{"location":"backend/authentication/#authentication-urls","title":"Authentication URLs","text":"<pre><code># apps/authentication/urls.py\n\nfrom django.urls import path\nfrom . import views\n\napp_name = 'authentication'\n\nurlpatterns = [\n    path('csrf/', views.csrf_token_view, name='csrf_token'),\n    path('login/', views.LoginView.as_view(), name='login'),\n    path('logout/', views.logout_view, name='logout'),\n    path('user/', views.current_user_view, name='current_user'),\n    path('change-password/', views.ChangePasswordView.as_view(), name='change_password'),\n    path('audit-log/', views.AuditLogView.as_view(), name='audit_log'),\n]\n\n# Main urls.py\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/auth/', include('apps.authentication.urls')),\n    path('api/', include('apps.api.urls')),\n]\n</code></pre>"},{"location":"backend/authentication/#session-management","title":"Session Management","text":""},{"location":"backend/authentication/#session-cleanup","title":"Session Cleanup","text":"<p>Automatic cleanup of expired sessions:</p> <pre><code># apps/authentication/management/commands/clearsessions.py\n\nfrom django.core.management.base import BaseCommand\nfrom django.contrib.sessions.models import Session\nfrom django.utils import timezone\n\nclass Command(BaseCommand):\n    help = 'Clear expired sessions'\n\n    def handle(self, *args, **options):\n        expired_sessions = Session.objects.filter(expire_date__lt=timezone.now())\n        count = expired_sessions.count()\n        expired_sessions.delete()\n\n        self.stdout.write(\n            self.style.SUCCESS(f'Successfully cleared {count} expired sessions')\n        )\n</code></pre>"},{"location":"backend/authentication/#session-extension","title":"Session Extension","text":"<p>Middleware to extend session on activity:</p> <pre><code># apps/authentication/middleware.py\n\nclass SessionExtensionMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        if request.user.is_authenticated:\n            # Extend session on authenticated requests\n            request.session.set_expiry(60 * 60 * 24 * 7)  # 7 days\n\n        response = self.get_response(request)\n        return response\n</code></pre>"},{"location":"backend/authentication/#testing","title":"Testing","text":""},{"location":"backend/authentication/#authentication-tests","title":"Authentication Tests","text":"<pre><code># apps/authentication/tests.py\n\nfrom django.test import TestCase, Client\nfrom django.contrib.auth.models import User\nfrom django.urls import reverse\nimport json\n\nclass AuthenticationTestCase(TestCase):\n    def setUp(self):\n        self.client = Client()\n        self.user = User.objects.create_user(\n            username='testuser',\n            password='testpass123',\n            email='test@example.com'\n        )\n\n    def test_csrf_token_endpoint(self):\n        response = self.client.get(reverse('authentication:csrf_token'))\n        self.assertEqual(response.status_code, 200)\n        data = response.json()\n        self.assertIn('csrfToken', data)\n\n    def test_login_success(self):\n        # Get CSRF token first\n        csrf_response = self.client.get(reverse('authentication:csrf_token'))\n        csrf_token = csrf_response.json()['csrfToken']\n\n        # Login with CSRF token\n        response = self.client.post(\n            reverse('authentication:login'),\n            json.dumps({\n                'username': 'testuser',\n                'password': 'testpass123'\n            }),\n            content_type='application/json',\n            HTTP_X_CSRFTOKEN=csrf_token\n        )\n\n        self.assertEqual(response.status_code, 200)\n        data = response.json()\n        self.assertEqual(data['username'], 'testuser')\n        self.assertIn('id', data)\n\n    def test_login_failure(self):\n        csrf_response = self.client.get(reverse('authentication:csrf_token'))\n        csrf_token = csrf_response.json()['csrfToken']\n\n        response = self.client.post(\n            reverse('authentication:login'),\n            json.dumps({\n                'username': 'testuser',\n                'password': 'wrongpassword'\n            }),\n            content_type='application/json',\n            HTTP_X_CSRFTOKEN=csrf_token\n        )\n\n        self.assertEqual(response.status_code, 401)\n        data = response.json()\n        self.assertIn('detail', data)\n\n    def test_protected_view_without_auth(self):\n        response = self.client.get(reverse('authentication:current_user'))\n        self.assertEqual(response.status_code, 401)\n\n    def test_logout(self):\n        # Login first\n        self.client.force_login(self.user)\n\n        # Get CSRF token\n        csrf_response = self.client.get(reverse('authentication:csrf_token'))\n        csrf_token = csrf_response.json()['csrfToken']\n\n        # Logout\n        response = self.client.post(\n            reverse('authentication:logout'),\n            HTTP_X_CSRFTOKEN=csrf_token\n        )\n\n        self.assertEqual(response.status_code, 200)\n\n        # Verify user is logged out\n        response = self.client.get(reverse('authentication:current_user'))\n        self.assertEqual(response.status_code, 401)\n</code></pre>"},{"location":"backend/authentication/#deployment-considerations","title":"Deployment Considerations","text":""},{"location":"backend/authentication/#production-security","title":"Production Security","text":"<ul> <li>Enable HTTPS in all environments</li> <li>Use secure session and CSRF cookie settings</li> <li>Implement proper CORS configuration</li> <li>Set up monitoring for failed login attempts</li> <li>Regular audit log review and cleanup</li> <li>Use environment variables for sensitive settings</li> </ul>"},{"location":"backend/authentication/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Use Redis for session storage in production</li> <li>Implement session cleanup automation</li> <li>Monitor authentication endpoint performance</li> <li>Cache profile data where appropriate</li> <li>Optimize audit log queries</li> </ul>"},{"location":"backend/authentication/#monitoring-and-alerting","title":"Monitoring and Alerting","text":"<ul> <li>Set up alerts for unusual login patterns</li> <li>Monitor failed authentication attempts</li> <li>Track session usage patterns</li> <li>Log and alert on security events</li> <li>Regular security audit reviews</li> </ul> <p>This authentication system provides a robust, secure foundation for the Django backend while maintaining complete compatibility with the existing React frontend authentication flow. </p>"},{"location":"backend/docker-setup/","title":"Docker Configuration Guide","text":""},{"location":"backend/docker-setup/#overview","title":"Overview","text":"<p>This document provides detailed information on the Docker configuration for the Broadcast Management System backend. The system uses Docker and Docker Compose to create a consistent development and production environment.</p>"},{"location":"backend/docker-setup/#docker-services","title":"Docker Services","text":"<p>The backend architecture consists of the following containerized services:</p> <ol> <li>Django Web Application</li> <li>PostgreSQL Database</li> <li>Redis (for caching and message broker)</li> <li>Celery Workers (for background tasks)</li> <li>Celery Beat (for scheduled tasks)</li> </ol>"},{"location":"backend/docker-setup/#docker-compose-configuration","title":"Docker Compose Configuration","text":""},{"location":"backend/docker-setup/#development-environment","title":"Development Environment","text":"<pre><code># docker-compose.yml\nversion: '3.8'\n\nservices:\n  db:\n    image: postgres:14\n    volumes:\n      - postgres_data:/var/lib/postgresql/data/\n    env_file:\n      - ./.env.db\n    environment:\n      - POSTGRES_PASSWORD=postgres\n      - POSTGRES_USER=postgres\n      - POSTGRES_DB=broadcast\n    ports:\n      - \"5432:5432\"\n    networks:\n      - backend-network\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  redis:\n    image: redis:alpine\n    ports:\n      - \"6379:6379\"\n    networks:\n      - backend-network\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"ping\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  web:\n    build:\n      context: ./backend\n      dockerfile: Dockerfile.dev\n    command: python manage.py runserver 0.0.0.0:8000\n    volumes:\n      - ./backend:/app\n      - static_volume:/app/staticfiles\n      - media_volume:/app/mediafiles\n    env_file:\n      - ./.env.dev\n    environment:\n      - DEBUG=1\n      - SECRET_KEY=devsecretkey\n      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]\n      - SQL_ENGINE=django.db.backends.postgresql\n      - SQL_DATABASE=broadcast\n      - SQL_USER=postgres\n      - SQL_PASSWORD=postgres\n      - SQL_HOST=db\n      - SQL_PORT=5432\n      - REDIS_HOST=redis\n      - REDIS_PORT=6379\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      - db\n      - redis\n    networks:\n      - backend-network\n    restart: unless-stopped\n\n  celery:\n    build:\n      context: ./backend\n      dockerfile: Dockerfile.dev\n    command: celery -A backend worker -l INFO\n    volumes:\n      - ./backend:/app\n    env_file:\n      - ./.env.dev\n    environment:\n      - DEBUG=1\n      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]\n      - REDIS_HOST=redis\n      - REDIS_PORT=6379\n    depends_on:\n      - web\n      - redis\n      - db\n    networks:\n      - backend-network\n    restart: unless-stopped\n\n  celery-beat:\n    build:\n      context: ./backend\n      dockerfile: Dockerfile.dev\n    command: celery -A backend beat -l INFO\n    volumes:\n      - ./backend:/app\n    env_file:\n      - ./.env.dev\n    environment:\n      - DEBUG=1\n      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]\n      - REDIS_HOST=redis\n      - REDIS_PORT=6379\n    depends_on:\n      - web\n      - redis\n      - db\n    networks:\n      - backend-network\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n  static_volume:\n  media_volume:\n\nnetworks:\n  backend-network:\n    driver: bridge\n</code></pre>"},{"location":"backend/docker-setup/#production-environment","title":"Production Environment","text":"<pre><code># docker-compose.prod.yml\nversion: '3.8'\n\nservices:\n  db:\n    image: postgres:14\n    volumes:\n      - postgres_data:/var/lib/postgresql/data/\n    env_file:\n      - ./.env.prod.db\n    networks:\n      - backend-network\n    restart: always\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  redis:\n    image: redis:alpine\n    networks:\n      - backend-network\n    restart: always\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"ping\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  web:\n    build:\n      context: ./backend\n      dockerfile: Dockerfile.prod\n    command: gunicorn backend.wsgi:application --bind 0.0.0.0:8000 --workers 4\n    volumes:\n      - static_volume:/app/staticfiles\n      - media_volume:/app/mediafiles\n    env_file:\n      - ./.env.prod\n    networks:\n      - backend-network\n    depends_on:\n      - db\n      - redis\n    restart: always\n\n  celery:\n    build:\n      context: ./backend\n      dockerfile: Dockerfile.prod\n    command: celery -A backend worker -l INFO\n    env_file:\n      - ./.env.prod\n    networks:\n      - backend-network\n    depends_on:\n      - web\n      - redis\n      - db\n    restart: always\n\n  celery-beat:\n    build:\n      context: ./backend\n      dockerfile: Dockerfile.prod\n    command: celery -A backend beat -l INFO\n    env_file:\n      - ./.env.prod\n    networks:\n      - backend-network\n    depends_on:\n      - web\n      - redis\n      - db\n    restart: always\n\n  nginx:\n    build: ./nginx\n    volumes:\n      - static_volume:/app/staticfiles\n      - media_volume:/app/mediafiles\n      - ./nginx/conf.d:/etc/nginx/conf.d\n      - ./certbot/www:/var/www/certbot\n      - ./certbot/conf:/etc/letsencrypt\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    networks:\n      - backend-network\n    depends_on:\n      - web\n    restart: always\n\nvolumes:\n  postgres_data:\n  static_volume:\n  media_volume:\n\nnetworks:\n  backend-network:\n    driver: bridge\n</code></pre>"},{"location":"backend/docker-setup/#dockerfile-configurations","title":"Dockerfile Configurations","text":""},{"location":"backend/docker-setup/#development-dockerfile","title":"Development Dockerfile","text":"<pre><code># Dockerfile.dev\nFROM python:3.10-slim\n\nWORKDIR /app\n\n# Set environment variables\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\nENV DEVELOPMENT=1\n\n# Install system dependencies\nRUN apt-get update \\\n    &amp;&amp; apt-get install -y --no-install-recommends \\\n        build-essential \\\n        libpq-dev \\\n        netcat-openbsd \\\n    &amp;&amp; apt-get clean \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install Python dependencies\nCOPY requirements.txt .\nRUN pip install --upgrade pip \\\n    &amp;&amp; pip install -r requirements.txt\n\n# Copy entrypoint script\nCOPY ./entrypoint.dev.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\n\n# Run entrypoint script\nENTRYPOINT [\"/entrypoint.sh\"]\n</code></pre>"},{"location":"backend/docker-setup/#production-dockerfile","title":"Production Dockerfile","text":"<pre><code># Dockerfile.prod\nFROM python:3.10-slim as builder\n\nWORKDIR /app\n\n# Set environment variables\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\n\n# Install system dependencies\nRUN apt-get update \\\n    &amp;&amp; apt-get install -y --no-install-recommends \\\n        build-essential \\\n        libpq-dev \\\n    &amp;&amp; apt-get clean \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Create Python virtual environment\nRUN python -m venv /venv\n\n# Install Python dependencies\nCOPY requirements.txt .\nRUN /venv/bin/pip install --upgrade pip \\\n    &amp;&amp; /venv/bin/pip install -r requirements.txt\n\n\n# Final stage\nFROM python:3.10-slim\n\n# Create non-root user\nRUN useradd -m appuser\n\n# Set working directory and ownership\nWORKDIR /app\nRUN chown -R appuser:appuser /app\n\n# Set environment variables\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\nENV PRODUCTION=1\nENV PATH=\"/venv/bin:$PATH\"\n\n# Install runtime dependencies\nRUN apt-get update \\\n    &amp;&amp; apt-get install -y --no-install-recommends \\\n        libpq-dev \\\n        netcat-openbsd \\\n    &amp;&amp; apt-get clean \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy virtual environment from builder\nCOPY --from=builder /venv /venv\n\n# Copy application code\nCOPY --chown=appuser:appuser . .\n\n# Copy entrypoint script\nCOPY --chown=appuser:appuser ./entrypoint.prod.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\n\n# Switch to non-root user\nUSER appuser\n\n# Run entrypoint script\nENTRYPOINT [\"/entrypoint.sh\"]\n</code></pre>"},{"location":"backend/docker-setup/#entrypoint-scripts","title":"Entrypoint Scripts","text":""},{"location":"backend/docker-setup/#development-entrypoint","title":"Development Entrypoint","text":"<pre><code>#!/bin/bash\n# entrypoint.dev.sh\n\n# Wait for PostgreSQL\necho \"Waiting for PostgreSQL...\"\nwhile ! nc -z $SQL_HOST $SQL_PORT; do\n  sleep 0.1\ndone\necho \"PostgreSQL started\"\n\n# Run migrations\npython manage.py migrate\n\n# Create superuser if needed\npython manage.py createsuperuser --noinput || true\n\n# Collect static files\npython manage.py collectstatic --no-input\n\nexec \"$@\"\n</code></pre>"},{"location":"backend/docker-setup/#production-entrypoint","title":"Production Entrypoint","text":"<pre><code>#!/bin/bash\n# entrypoint.prod.sh\n\n# Wait for PostgreSQL\necho \"Waiting for PostgreSQL...\"\nwhile ! nc -z $SQL_HOST $SQL_PORT; do\n  sleep 0.1\ndone\necho \"PostgreSQL started\"\n\n# Run migrations\npython manage.py migrate\n\n# Collect static files\npython manage.py collectstatic --no-input\n\nexec \"$@\"\n</code></pre>"},{"location":"backend/docker-setup/#environment-variables","title":"Environment Variables","text":""},{"location":"backend/docker-setup/#development-environment-envdev","title":"Development Environment (.env.dev)","text":"<pre><code>DEBUG=1\nSECRET_KEY=devsecretkey\nDJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]\n\n# Database settings\nSQL_ENGINE=django.db.backends.postgresql\nSQL_DATABASE=broadcast\nSQL_USER=postgres\nSQL_PASSWORD=postgres\nSQL_HOST=db\nSQL_PORT=5432\n\n# Redis settings\nREDIS_HOST=redis\nREDIS_PORT=6379\n\n# Email settings\nEMAIL_BACKEND=django.core.mail.backends.console.EmailBackend\n</code></pre>"},{"location":"backend/docker-setup/#production-environment-envprod","title":"Production Environment (.env.prod)","text":"<pre><code>DEBUG=0\nSECRET_KEY=your-production-secret-key\nDJANGO_ALLOWED_HOSTS=yourdomain.com www.yourdomain.com\n\n# Database settings\nSQL_ENGINE=django.db.backends.postgresql\nSQL_DATABASE=broadcast_prod\nSQL_USER=broadcast_user\nSQL_PASSWORD=secure-password\nSQL_HOST=db\nSQL_PORT=5432\n\n# Redis settings\nREDIS_HOST=redis\nREDIS_PORT=6379\n\n# Email settings\nEMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend\nEMAIL_HOST=smtp.your-email-provider.com\nEMAIL_PORT=587\nEMAIL_USE_TLS=1\nEMAIL_HOST_USER=your-email@yourdomain.com\nEMAIL_HOST_PASSWORD=your-email-password\n</code></pre>"},{"location":"backend/docker-setup/#database-environment-envproddb","title":"Database Environment (.env.prod.db)","text":"<pre><code>POSTGRES_USER=broadcast_user\nPOSTGRES_PASSWORD=secure-password\nPOSTGRES_DB=broadcast_prod\n</code></pre>"},{"location":"backend/docker-setup/#nginx-configuration","title":"NGINX Configuration","text":"<pre><code># /nginx/conf.d/default.conf\nupstream django {\n    server web:8000;\n}\n\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name yourdomain.com www.yourdomain.com;\n\n    location / {\n        return 301 https://$host$request_uri;\n    }\n\n    location /.well-known/acme-challenge/ {\n        root /var/www/certbot;\n    }\n}\n\nserver {\n    listen 443 ssl;\n    listen [::]:443 ssl;\n    server_name yourdomain.com www.yourdomain.com;\n\n    ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;\n\n    # SSL configuration\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers on;\n    ssl_ciphers \"EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\";\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_tickets off;\n    ssl_stapling on;\n    ssl_stapling_verify on;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Frame-Options DENY;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-XSS-Protection \"1; mode=block\";\n\n    location / {\n        proxy_pass http://django;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    location /static/ {\n        alias /app/staticfiles/;\n    }\n\n    location /media/ {\n        alias /app/mediafiles/;\n    }\n}\n</code></pre>"},{"location":"backend/docker-setup/#development-workflow","title":"Development Workflow","text":""},{"location":"backend/docker-setup/#starting-the-development-environment","title":"Starting the Development Environment","text":"<pre><code># Clone the repository\ngit clone https://github.com/your-org/broadcast.git\ncd broadcast\n\n# Copy environment files\ncp .env.example .env.dev\ncp .env.db.example .env.db\n\n# Start the Docker containers\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f\n</code></pre>"},{"location":"backend/docker-setup/#running-django-management-commands","title":"Running Django Management Commands","text":"<pre><code># Create migrations\ndocker-compose exec web python manage.py makemigrations\n\n# Apply migrations\ndocker-compose exec web python manage.py migrate\n\n# Create a superuser\ndocker-compose exec web python manage.py createsuperuser\n\n# Collect static files\ndocker-compose exec web python manage.py collectstatic --no-input\n</code></pre>"},{"location":"backend/docker-setup/#accessing-services","title":"Accessing Services","text":"<ul> <li>Django Admin: http://localhost:8000/admin/</li> <li>API: http://localhost:8000/api/</li> <li>PostgreSQL: localhost:5432 (using database client)</li> <li>Redis: localhost:6379 (using Redis client)</li> </ul>"},{"location":"backend/docker-setup/#deployment-process","title":"Deployment Process","text":""},{"location":"backend/docker-setup/#staging-deployment","title":"Staging Deployment","text":"<pre><code># Deploy to staging\ndocker-compose -f docker-compose.staging.yml up -d\n\n# Verify deployment\ndocker-compose -f docker-compose.staging.yml logs\n</code></pre>"},{"location":"backend/docker-setup/#production-deployment","title":"Production Deployment","text":"<pre><code># Deploy to production\ndocker-compose -f docker-compose.prod.yml up -d\n\n# Verify deployment\ndocker-compose -f docker-compose.prod.yml logs\n</code></pre>"},{"location":"backend/docker-setup/#backup-and-restore","title":"Backup and Restore","text":""},{"location":"backend/docker-setup/#database-backup","title":"Database Backup","text":"<pre><code># Create a backup\ndocker-compose exec db pg_dump -U postgres broadcast &gt; backup.sql\n\n# Schedule regular backups with cron\n# Example cron job (daily at 2 AM)\n# 0 2 * * * docker-compose -f /path/to/docker-compose.yml exec -T db pg_dump -U postgres broadcast &gt; /path/to/backups/broadcast_$(date +\\%Y\\%m\\%d).sql\n</code></pre>"},{"location":"backend/docker-setup/#database-restore","title":"Database Restore","text":"<pre><code># Restore from a backup\ncat backup.sql | docker-compose exec -T db psql -U postgres broadcast\n</code></pre>"},{"location":"backend/docker-setup/#maintenance","title":"Maintenance","text":""},{"location":"backend/docker-setup/#updating-containers","title":"Updating Containers","text":"<pre><code># Pull latest images\ndocker-compose pull\n\n# Rebuild and restart containers\ndocker-compose up -d --build\n</code></pre>"},{"location":"backend/docker-setup/#monitoring-containers","title":"Monitoring Containers","text":"<pre><code># Check container status\ndocker-compose ps\n\n# View resource usage\ndocker stats\n</code></pre>"},{"location":"backend/docker-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"backend/docker-setup/#common-issues","title":"Common Issues","text":"<ol> <li>Database Connection Errors:</li> <li>Check if PostgreSQL container is running</li> <li>Verify environment variables in .env files</li> <li> <p>Check network configuration</p> </li> <li> <p>Static Files Not Loading:</p> </li> <li>Ensure collectstatic has been run</li> <li>Check NGINX configuration</li> <li> <p>Verify volume mounts</p> </li> <li> <p>Application Errors:</p> </li> <li>Check application logs: <code>docker-compose logs web</code></li> <li>Verify Django settings</li> <li>Check for migrations that need to be applied</li> </ol>"},{"location":"backend/docker-setup/#debug-mode","title":"Debug Mode","text":"<p>For development, enable more verbose logging by setting:</p> <pre><code>DEBUG=1\n</code></pre> <p>For production, always ensure:</p> <pre><code>DEBUG=0\n</code></pre>"},{"location":"backend/docker-setup/#conclusion","title":"Conclusion","text":"<p>This Docker configuration provides a robust, scalable, and maintainable environment for the Broadcast Management System backend. By following the practices outlined in this document, developers can ensure consistent environments across development, staging, and production. </p>"},{"location":"backend/models/","title":"Django Models Design","text":""},{"location":"backend/models/#overview","title":"Overview","text":"<p>This document outlines the database models design for the Broadcast Management System backend. The models are designed to support all the data requirements of the existing frontend application.</p>"},{"location":"backend/models/#database-schema","title":"Database Schema","text":"<pre><code>erDiagram\n    User ||--o{ Profile : has\n    User ||--o{ TimeEntry : creates\n    User ||--o{ TimeOffRequest : submits\n    User ||--o{ ScheduledEvent : participates\n    User ||--o{ IncidentTicket : reports\n    User ||--o{ ServiceTicket : requests\n\n    Profile ||--o| Location : based_at\n    Profile }o--|| Department : belongs_to\n\n    Location ||--o{ Facility : contains\n    Facility ||--o{ ScheduledEvent : hosts\n\n    Shift ||--o{ ScheduledEvent : defines\n    Shift ||--o{ TimeEntry : logs\n\n    IncidentType ||--o{ IncidentTicket : categorizes\n\n    ScheduledEvent ||--o{ TimeEntry : records</code></pre>"},{"location":"backend/models/#model-definitions","title":"Model Definitions","text":""},{"location":"backend/models/#user-authentication-and-profile-models","title":"User Authentication and Profile Models","text":"<pre><code>from django.db import models\nfrom django.contrib.auth.models import AbstractUser, Group, Permission\nfrom django.utils.translation import gettext_lazy as _\n\nclass User(AbstractUser):\n    \"\"\"Custom user model to extend the default Django User\"\"\"\n    email = models.EmailField(_('email address'), unique=True)\n\n    # Additional fields\n    is_active_directory = models.BooleanField(default=False)\n    last_login_ip = models.GenericIPAddressField(null=True, blank=True)\n\n    # Required for custom user model\n    groups = models.ManyToManyField(\n        Group,\n        verbose_name=_('groups'),\n        blank=True,\n        related_name='broadcast_users',\n        help_text=_(\n            'The groups this user belongs to. A user will get all permissions '\n            'granted to each of their groups.'\n        ),\n    )\n    user_permissions = models.ManyToManyField(\n        Permission,\n        verbose_name=_('user permissions'),\n        blank=True,\n        related_name='broadcast_users',\n        help_text=_('Specific permissions for this user.'),\n    )\n\n    def __str__(self):\n        return self.username\n\nclass Department(models.Model):\n    \"\"\"Department model for organizing users\"\"\"\n    name = models.CharField(max_length=100)\n    description = models.TextField(blank=True)\n    manager = models.ForeignKey(\n        User, \n        on_delete=models.SET_NULL, \n        null=True, \n        blank=True,\n        related_name='managed_departments'\n    )\n\n    def __str__(self):\n        return self.name\n\nclass Location(models.Model):\n    \"\"\"Physical location model\"\"\"\n    name = models.CharField(max_length=100)\n    address = models.TextField()\n    city = models.CharField(max_length=100)\n    state = models.CharField(max_length=100)\n    postal_code = models.CharField(max_length=20)\n    country = models.CharField(max_length=100)\n    phone = models.CharField(max_length=20, blank=True)\n    is_active = models.BooleanField(default=True)\n\n    def __str__(self):\n        return self.name\n\nclass Profile(models.Model):\n    \"\"\"Extended user profile information\"\"\"\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')\n    title = models.CharField(max_length=100, blank=True)\n    department = models.ForeignKey(\n        Department, \n        on_delete=models.SET_NULL, \n        null=True, \n        blank=True,\n        related_name='profiles'\n    )\n    phone = models.CharField(max_length=20, blank=True)\n    location = models.ForeignKey(\n        Location, \n        on_delete=models.SET_NULL, \n        null=True, \n        blank=True,\n        related_name='profiles'\n    )\n    employee_id = models.CharField(max_length=50, blank=True)\n    hire_date = models.DateField(null=True, blank=True)\n    profile_image = models.ImageField(upload_to='profiles/', null=True, blank=True)\n    emergency_contact = models.TextField(blank=True)\n    notes = models.TextField(blank=True)\n\n    def __str__(self):\n        return f\"{self.user.username}'s profile\"\n</code></pre>"},{"location":"backend/models/#facility-and-equipment-models","title":"Facility and Equipment Models","text":"<pre><code>class Facility(models.Model):\n    \"\"\"Facility model for buildings or areas within a location\"\"\"\n    name = models.CharField(max_length=100)\n    location = models.ForeignKey(\n        Location, \n        on_delete=models.CASCADE,\n        related_name='facilities'\n    )\n    description = models.TextField(blank=True)\n    capacity = models.IntegerField(null=True, blank=True)\n    is_active = models.BooleanField(default=True)\n\n    class Meta:\n        verbose_name_plural = \"facilities\"\n\n    def __str__(self):\n        return f\"{self.name} at {self.location.name}\"\n\nclass EquipmentCategory(models.Model):\n    \"\"\"Equipment category model\"\"\"\n    name = models.CharField(max_length=100)\n    description = models.TextField(blank=True)\n\n    class Meta:\n        verbose_name_plural = \"equipment categories\"\n\n    def __str__(self):\n        return self.name\n\nclass Equipment(models.Model):\n    \"\"\"Equipment model for tracking broadcast equipment\"\"\"\n    name = models.CharField(max_length=100)\n    category = models.ForeignKey(\n        EquipmentCategory, \n        on_delete=models.SET_NULL, \n        null=True,\n        related_name='equipment'\n    )\n    serial_number = models.CharField(max_length=100, blank=True)\n    facility = models.ForeignKey(\n        Facility, \n        on_delete=models.SET_NULL, \n        null=True, \n        blank=True,\n        related_name='equipment'\n    )\n    status = models.CharField(\n        max_length=20,\n        choices=[\n            ('available', 'Available'),\n            ('in_use', 'In Use'),\n            ('maintenance', 'Maintenance'),\n            ('retired', 'Retired'),\n        ],\n        default='available'\n    )\n    purchase_date = models.DateField(null=True, blank=True)\n    notes = models.TextField(blank=True)\n    last_maintenance = models.DateField(null=True, blank=True)\n\n    def __str__(self):\n        return self.name\n</code></pre>"},{"location":"backend/models/#scheduling-models","title":"Scheduling Models","text":"<pre><code>class Shift(models.Model):\n    \"\"\"Shift model for defining work periods\"\"\"\n    name = models.CharField(max_length=100)\n    start_time = models.TimeField()\n    end_time = models.TimeField()\n    description = models.TextField(blank=True)\n    is_active = models.BooleanField(default=True)\n    color = models.CharField(max_length=20, blank=True)  # For UI display\n\n    def __str__(self):\n        return self.name\n\nclass ScheduledEvent(models.Model):\n    \"\"\"Scheduled event model for broadcast activities\"\"\"\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True)\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n    shift = models.ForeignKey(\n        Shift, \n        on_delete=models.SET_NULL, \n        null=True, \n        blank=True,\n        related_name='events'\n    )\n    facility = models.ForeignKey(\n        Facility, \n        on_delete=models.SET_NULL, \n        null=True, \n        blank=True,\n        related_name='events'\n    )\n    participants = models.ManyToManyField(\n        User,\n        related_name='scheduled_events',\n        blank=True\n    )\n    is_recurring = models.BooleanField(default=False)\n    recurrence_pattern = models.JSONField(null=True, blank=True)  # Stores recurrence info\n    status = models.CharField(\n        max_length=20,\n        choices=[\n            ('scheduled', 'Scheduled'),\n            ('in_progress', 'In Progress'),\n            ('completed', 'Completed'),\n            ('cancelled', 'Cancelled'),\n        ],\n        default='scheduled'\n    )\n    equipment = models.ManyToManyField(\n        Equipment,\n        related_name='scheduled_events',\n        blank=True\n    )\n    created_by = models.ForeignKey(\n        User,\n        on_delete=models.SET_NULL,\n        null=True,\n        related_name='created_events'\n    )\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title\n\nclass TimeEntry(models.Model):\n    \"\"\"Time entry model for tracking work hours\"\"\"\n    user = models.ForeignKey(\n        User,\n        on_delete=models.CASCADE,\n        related_name='time_entries'\n    )\n    date = models.DateField()\n    start_time = models.TimeField()\n    end_time = models.TimeField(null=True, blank=True)\n    shift = models.ForeignKey(\n        Shift, \n        on_delete=models.SET_NULL, \n        null=True, \n        blank=True,\n        related_name='time_entries'\n    )\n    scheduled_event = models.ForeignKey(\n        ScheduledEvent,\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        related_name='time_entries'\n    )\n    notes = models.TextField(blank=True)\n    status = models.CharField(\n        max_length=20,\n        choices=[\n            ('pending', 'Pending'),\n            ('approved', 'Approved'),\n            ('rejected', 'Rejected'),\n        ],\n        default='pending'\n    )\n    approved_by = models.ForeignKey(\n        User,\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        related_name='approved_time_entries'\n    )\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        verbose_name_plural = \"time entries\"\n\n    def __str__(self):\n        return f\"{self.user.username} - {self.date} {self.start_time}\"\n\nclass TimeOffRequest(models.Model):\n    \"\"\"Time off request model\"\"\"\n    user = models.ForeignKey(\n        User,\n        on_delete=models.CASCADE,\n        related_name='time_off_requests'\n    )\n    start_date = models.DateField()\n    end_date = models.DateField()\n    reason = models.TextField()\n    type = models.CharField(\n        max_length=20,\n        choices=[\n            ('vacation', 'Vacation'),\n            ('sick', 'Sick Leave'),\n            ('personal', 'Personal'),\n            ('other', 'Other'),\n        ],\n        default='vacation'\n    )\n    status = models.CharField(\n        max_length=20,\n        choices=[\n            ('pending', 'Pending'),\n            ('approved', 'Approved'),\n            ('rejected', 'Rejected'),\n        ],\n        default='pending'\n    )\n    approved_by = models.ForeignKey(\n        User,\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        related_name='approved_time_off_requests'\n    )\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return f\"{self.user.username} - {self.start_date} to {self.end_date}\"\n</code></pre>"},{"location":"backend/models/#ticket-management-models","title":"Ticket Management Models","text":"<pre><code>class IncidentType(models.Model):\n    \"\"\"Incident type categorization\"\"\"\n    name = models.CharField(max_length=100)\n    description = models.TextField(blank=True)\n    severity_level = models.IntegerField(default=3)  # 1-5 scale, 1 being highest\n    is_active = models.BooleanField(default=True)\n\n    def __str__(self):\n        return self.name\n\nclass IncidentTicket(models.Model):\n    \"\"\"Incident ticket model for issues and problems\"\"\"\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    incident_type = models.ForeignKey(\n        IncidentType,\n        on_delete=models.SET_NULL,\n        null=True,\n        related_name='tickets'\n    )\n    reporter = models.ForeignKey(\n        User,\n        on_delete=models.SET_NULL,\n        null=True,\n        related_name='reported_incidents'\n    )\n    assigned_to = models.ForeignKey(\n        User,\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        related_name='assigned_incidents'\n    )\n    facility = models.ForeignKey(\n        Facility,\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        related_name='incidents'\n    )\n    equipment = models.ForeignKey(\n        Equipment,\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        related_name='incidents'\n    )\n    priority = models.CharField(\n        max_length=20,\n        choices=[\n            ('low', 'Low'),\n            ('medium', 'Medium'),\n            ('high', 'High'),\n            ('critical', 'Critical'),\n        ],\n        default='medium'\n    )\n    status = models.CharField(\n        max_length=20,\n        choices=[\n            ('new', 'New'),\n            ('in_progress', 'In Progress'),\n            ('on_hold', 'On Hold'),\n            ('resolved', 'Resolved'),\n            ('closed', 'Closed'),\n        ],\n        default='new'\n    )\n    resolution = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    resolved_at = models.DateTimeField(null=True, blank=True)\n\n    def __str__(self):\n        return self.title\n\nclass ServiceTicket(models.Model):\n    \"\"\"Service ticket model for requests and changes\"\"\"\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    requester = models.ForeignKey(\n        User,\n        on_delete=models.SET_NULL,\n        null=True,\n        related_name='requested_services'\n    )\n    assigned_to = models.ForeignKey(\n        User,\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        related_name='assigned_services'\n    )\n    facility = models.ForeignKey(\n        Facility,\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        related_name='service_tickets'\n    )\n    equipment = models.ForeignKey(\n        Equipment,\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        related_name='service_tickets'\n    )\n    service_type = models.CharField(\n        max_length=20,\n        choices=[\n            ('request', 'Request'),\n            ('change', 'Change'),\n            ('information', 'Information'),\n        ],\n        default='request'\n    )\n    priority = models.CharField(\n        max_length=20,\n        choices=[\n            ('low', 'Low'),\n            ('medium', 'Medium'),\n            ('high', 'High'),\n        ],\n        default='medium'\n    )\n    status = models.CharField(\n        max_length=20,\n        choices=[\n            ('new', 'New'),\n            ('in_progress', 'In Progress'),\n            ('on_hold', 'On Hold'),\n            ('completed', 'Completed'),\n            ('cancelled', 'Cancelled'),\n        ],\n        default='new'\n    )\n    requested_completion_date = models.DateField(null=True, blank=True)\n    completion_notes = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    completed_at = models.DateTimeField(null=True, blank=True)\n\n    def __str__(self):\n        return self.title\n</code></pre>"},{"location":"backend/models/#communication-and-notification-models","title":"Communication and Notification Models","text":"<pre><code>class Comment(models.Model):\n    \"\"\"Comment model for tickets and events\"\"\"\n    text = models.TextField()\n    user = models.ForeignKey(\n        User,\n        on_delete=models.CASCADE,\n        related_name='comments'\n    )\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    # Generic Foreign Key setup\n    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)\n    object_id = models.PositiveIntegerField()\n    content_object = GenericForeignKey('content_type', 'object_id')\n\n    def __str__(self):\n        return f\"Comment by {self.user.username} on {self.created_at}\"\n\nclass Notification(models.Model):\n    \"\"\"Notification model for system alerts\"\"\"\n    user = models.ForeignKey(\n        User,\n        on_delete=models.CASCADE,\n        related_name='notifications'\n    )\n    title = models.CharField(max_length=100)\n    message = models.TextField()\n    is_read = models.BooleanField(default=False)\n    notification_type = models.CharField(\n        max_length=20,\n        choices=[\n            ('info', 'Information'),\n            ('warning', 'Warning'),\n            ('alert', 'Alert'),\n        ],\n        default='info'\n    )\n\n    # Generic Foreign Key for the object the notification refers to\n    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, null=True, blank=True)\n    object_id = models.PositiveIntegerField(null=True, blank=True)\n    content_object = GenericForeignKey('content_type', 'object_id')\n\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"{self.title} for {self.user.username}\"\n</code></pre>"},{"location":"backend/models/#audit-and-logging-models","title":"Audit and Logging Models","text":"<pre><code>class AuditLog(models.Model):\n    \"\"\"Audit log for system activities\"\"\"\n    user = models.ForeignKey(\n        User,\n        on_delete=models.SET_NULL,\n        null=True,\n        related_name='audit_logs'\n    )\n    action = models.CharField(max_length=100)\n    details = models.JSONField()\n    ip_address = models.GenericIPAddressField(null=True, blank=True)\n    user_agent = models.TextField(blank=True)\n\n    # Generic Foreign Key for the affected object\n    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, null=True, blank=True)\n    object_id = models.PositiveIntegerField(null=True, blank=True)\n    content_object = GenericForeignKey('content_type', 'object_id')\n\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"{self.action} by {self.user} at {self.created_at}\"\n</code></pre>"},{"location":"backend/models/#model-serializers","title":"Model Serializers","text":"<p>Django REST Framework serializers will be created for each model to facilitate API responses. Below is an example of the serializers structure:</p> <pre><code># serializers.py\nfrom rest_framework import serializers\nfrom .models import User, Profile, Location, Facility, Shift, IncidentTicket, ServiceTicket\n\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id', 'username', 'email', 'first_name', 'last_name', 'is_active']\n        read_only_fields = ['id']\n\nclass ProfileSerializer(serializers.ModelSerializer):\n    user = UserSerializer(read_only=True)\n\n    class Meta:\n        model = Profile\n        fields = ['id', 'user', 'title', 'department', 'phone', 'location', \n                 'employee_id', 'hire_date', 'profile_image', 'emergency_contact']\n        read_only_fields = ['id']\n\nclass LocationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Location\n        fields = ['id', 'name', 'address', 'city', 'state', 'postal_code', \n                 'country', 'phone', 'is_active']\n        read_only_fields = ['id']\n\nclass FacilitySerializer(serializers.ModelSerializer):\n    location_name = serializers.CharField(source='location.name', read_only=True)\n\n    class Meta:\n        model = Facility\n        fields = ['id', 'name', 'location', 'location_name', 'description', \n                 'capacity', 'is_active']\n        read_only_fields = ['id', 'location_name']\n</code></pre>"},{"location":"backend/models/#database-migrations","title":"Database Migrations","text":"<p>Django migrations will be used to create and maintain the database schema. The initial migrations will create all the necessary tables and relationships.</p> <pre><code># Generate initial migrations\npython manage.py makemigrations\n\n# Apply migrations to database\npython manage.py migrate\n</code></pre>"},{"location":"backend/models/#data-seeding","title":"Data Seeding","text":"<p>Initial data for development and testing can be created using Django fixtures or custom management commands.</p> <pre><code># Example management command for creating initial data\nfrom django.core.management.base import BaseCommand\nfrom django.contrib.auth import get_user_model\nfrom ...models import Location, Facility, Department, Shift\n\nUser = get_user_model()\n\nclass Command(BaseCommand):\n    help = 'Seeds the database with initial data'\n\n    def handle(self, *args, **kwargs):\n        # Create superuser\n        if not User.objects.filter(username='admin').exists():\n            User.objects.create_superuser('admin', 'admin@example.com', 'adminpassword')\n            self.stdout.write(self.style.SUCCESS('Superuser created'))\n\n        # Create locations\n        if not Location.objects.exists():\n            locations = [\n                {'name': 'Main Studio', 'city': 'New York', 'state': 'NY'},\n                {'name': 'Remote Office', 'city': 'Los Angeles', 'state': 'CA'},\n            ]\n            for loc_data in locations:\n                Location.objects.create(\n                    name=loc_data['name'],\n                    address='123 Broadcast St.',\n                    city=loc_data['city'],\n                    state=loc_data['state'],\n                    postal_code='10001',\n                    country='USA'\n                )\n            self.stdout.write(self.style.SUCCESS('Locations created'))\n\n        # Create more seed data for other models...\n</code></pre>"},{"location":"backend/models/#database-indexes","title":"Database Indexes","text":"<p>To optimize query performance, indexes will be added to frequently queried fields:</p> <pre><code>class ScheduledEvent(models.Model):\n    # ... fields ...\n\n    class Meta:\n        indexes = [\n            models.Index(fields=['start_time', 'end_time']),\n            models.Index(fields=['status']),\n        ]\n\nclass TimeEntry(models.Model):\n    # ... fields ...\n\n    class Meta:\n        indexes = [\n            models.Index(fields=['user', 'date']),\n            models.Index(fields=['status']),\n        ]\n</code></pre>"},{"location":"backend/models/#permissions-and-access-control","title":"Permissions and Access Control","text":"<p>Django's permission system will be used to control access to model data. Custom permissions will be defined as needed:</p> <pre><code>class IncidentTicket(models.Model):\n    # ... fields ...\n\n    class Meta:\n        permissions = [\n            (\"close_incident\", \"Can close incident tickets\"),\n            (\"assign_incident\", \"Can assign incident tickets to users\"),\n        ]\n</code></pre>"},{"location":"backend/models/#conclusion","title":"Conclusion","text":"<p>This model design provides a comprehensive foundation for the Broadcast Management System backend. The models are structured to support the existing frontend application while allowing for future expansion of features. The use of Django's ORM provides flexibility in handling database operations and migrations, making it easier to evolve the schema as requirements change. </p>"},{"location":"frontend/architecture/","title":"Frontend Architecture","text":"<p>The Broadcast Management System frontend is built with React 18, TypeScript, and modern development tools. This document provides a comprehensive overview of the architecture, design patterns, and component structure.</p>"},{"location":"frontend/architecture/#overview","title":"Overview","text":"<p>The frontend is a single-page application (SPA) built with React that provides a complete user interface for broadcast management operations. It's designed to work independently of a backend during development and seamlessly integrate with a Django REST API in production.</p>"},{"location":"frontend/architecture/#technology-stack","title":"Technology Stack","text":""},{"location":"frontend/architecture/#core-technologies","title":"Core Technologies","text":"<ul> <li>React 18: Component-based UI library with Hooks</li> <li>TypeScript: Type-safe JavaScript development</li> <li>Vite: Fast build tool and development server</li> <li>React Router v6: Client-side routing</li> </ul>"},{"location":"frontend/architecture/#styling-ui","title":"Styling &amp; UI","text":"<ul> <li>Tailwind CSS: Utility-first CSS framework</li> <li>shadcn/ui: High-quality component library built on Radix UI</li> <li>Radix UI: Primitive components for accessibility</li> <li>Lucide React: Modern icon library</li> </ul>"},{"location":"frontend/architecture/#state-management","title":"State Management","text":"<ul> <li>React Context API: Global state management</li> <li>TanStack Query: Server state management and caching</li> <li>React Hook Form: Form state management</li> <li>Zod: Runtime type validation</li> </ul>"},{"location":"frontend/architecture/#utilities","title":"Utilities","text":"<ul> <li>date-fns: Date manipulation and formatting</li> <li>clsx: Conditional className utilities</li> <li>Sonner: Toast notifications</li> </ul>"},{"location":"frontend/architecture/#project-structure","title":"Project Structure","text":"<pre><code>src/\n\u251c\u2500\u2500 components/          # Reusable UI components\n\u2502   \u251c\u2500\u2500 ui/             # shadcn/ui base components\n\u2502   \u251c\u2500\u2500 reports/        # Report-specific components\n\u2502   \u2514\u2500\u2500 scheduling/     # Scheduling-specific components\n\u251c\u2500\u2500 pages/              # Main application pages\n\u251c\u2500\u2500 contexts/           # React Context providers\n\u251c\u2500\u2500 hooks/              # Custom React hooks\n\u251c\u2500\u2500 services/           # API service layer\n\u251c\u2500\u2500 types/              # TypeScript type definitions\n\u251c\u2500\u2500 lib/                # Utility functions\n\u251c\u2500\u2500 App.tsx             # Main application component\n\u2514\u2500\u2500 main.tsx           # Application entry point\n</code></pre>"},{"location":"frontend/architecture/#architecture-patterns","title":"Architecture Patterns","text":""},{"location":"frontend/architecture/#component-architecture","title":"Component Architecture","text":"<pre><code>graph TD\n    App[App.tsx&lt;br/&gt;Root Component]\n\n    subgraph \"Providers\"\n        Auth[AuthProvider]\n        Query[QueryClientProvider]\n        Router[BrowserRouter]\n        Settings[SettingsProvider]\n    end\n\n    subgraph \"Layout\"\n        Layout[Layout Component]\n        Sidebar[Sidebar Navigation]\n        Header[Header Bar]\n    end\n\n    subgraph \"Pages\"\n        Dashboard[Dashboard]\n        TimeKeeping[Time Keeping]\n        Scheduling[Scheduling]\n        Reports[Reports]\n        Settings_Page[Settings]\n    end\n\n    subgraph \"Components\"\n        Forms[Form Components]\n        Tables[Data Tables]\n        Dialogs[Modal Dialogs]\n        UI[UI Components]\n    end\n\n    App --&gt; Auth\n    Auth --&gt; Query\n    Query --&gt; Router\n    Router --&gt; Layout\n    Layout --&gt; Sidebar\n    Layout --&gt; Header\n    Layout --&gt; Dashboard\n    Layout --&gt; TimeKeeping\n    Layout --&gt; Scheduling\n    Layout --&gt; Reports\n    Layout --&gt; Settings_Page\n\n    Dashboard --&gt; Forms\n    TimeKeeping --&gt; Tables\n    Scheduling --&gt; Dialogs\n    Reports --&gt; UI</code></pre>"},{"location":"frontend/architecture/#data-flow","title":"Data Flow","text":"<p>The application follows a unidirectional data flow pattern:</p> <ol> <li>User Actions \u2192 Trigger events in components</li> <li>Components \u2192 Update local state or call API services</li> <li>Services \u2192 Make HTTP requests to backend APIs</li> <li>Context/Query \u2192 Manage global state and cache responses</li> <li>Components \u2192 Re-render with updated data</li> </ol>"},{"location":"frontend/architecture/#routing-architecture","title":"Routing Architecture","text":"<pre><code>// Route structure with protection and layout\n&lt;BrowserRouter&gt;\n  &lt;Routes&gt;\n    &lt;Route path=\"/login\" element={&lt;Login /&gt;} /&gt;\n    &lt;Route path=\"/\" element={\n      &lt;ProtectedRoute&gt;\n        &lt;Layout&gt;\n          &lt;Dashboard /&gt;\n        &lt;/Layout&gt;\n      &lt;/ProtectedRoute&gt;\n    } /&gt;\n    // ... other routes\n  &lt;/Routes&gt;\n&lt;/BrowserRouter&gt;\n</code></pre>"},{"location":"frontend/architecture/#core-components","title":"Core Components","text":""},{"location":"frontend/architecture/#app-component","title":"App Component","text":"<p>The root component that sets up providers and routing:</p> <pre><code>const App = () =&gt; {\n  return (\n    &lt;QueryClientProvider client={queryClient}&gt;\n      &lt;AuthProvider&gt;\n        &lt;TooltipProvider&gt;\n          &lt;BrowserRouter&gt;\n            {/* Route definitions */}\n          &lt;/BrowserRouter&gt;\n        &lt;/TooltipProvider&gt;\n      &lt;/AuthProvider&gt;\n    &lt;/QueryClientProvider&gt;\n  );\n};\n</code></pre>"},{"location":"frontend/architecture/#layout-system","title":"Layout System","text":"<p>The layout provides consistent structure across all pages:</p> <ul> <li>Sidebar Navigation: Collapsible navigation menu</li> <li>Header Bar: User info, notifications, logout</li> <li>Main Content: Page-specific content area</li> <li>Protected Routes: Authentication-based access control</li> </ul>"},{"location":"frontend/architecture/#state-management-strategy","title":"State Management Strategy","text":""},{"location":"frontend/architecture/#1-authentication-state-react-context","title":"1. Authentication State (React Context)","text":"<pre><code>interface AuthContextType {\n  user: DjangoUser | null;\n  profile: Profile | null;\n  isLoading: boolean;\n  login: (username: string, password: string) =&gt; Promise&lt;boolean&gt;;\n  logout: () =&gt; Promise&lt;void&gt;;\n}\n</code></pre>"},{"location":"frontend/architecture/#2-settings-state-react-context","title":"2. Settings State (React Context)","text":"<pre><code>interface SettingsContextType {\n  locations: Location[];\n  facilities: Facility[];\n  shifts: Shift[];\n  incidentTypes: IncidentType[];\n  // CRUD operations\n}\n</code></pre>"},{"location":"frontend/architecture/#3-server-state-tanstack-query","title":"3. Server State (TanStack Query)","text":"<pre><code>// Example query hook\nconst useIncidentTickets = () =&gt; {\n  return useQuery({\n    queryKey: ['incident-tickets'],\n    queryFn: () =&gt; djangoApi.getIncidentTickets(),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n};\n</code></pre>"},{"location":"frontend/architecture/#component-categories","title":"Component Categories","text":""},{"location":"frontend/architecture/#1-layout-components","title":"1. Layout Components","text":"<ul> <li>Layout: Main application layout wrapper</li> <li>Sidebar: Navigation sidebar with menu items</li> <li>ProtectedRoute: Authentication wrapper for routes</li> </ul>"},{"location":"frontend/architecture/#2-page-components","title":"2. Page Components","text":"<ul> <li>Dashboard: Analytics and overview page</li> <li>TimeKeeping: Time tracking and approval</li> <li>Scheduling: Event and shift scheduling</li> <li>EmployeeManagement: User and profile management</li> <li>Reports: Data visualization and exports</li> <li>Settings: System configuration</li> </ul>"},{"location":"frontend/architecture/#3-form-components","title":"3. Form Components","text":"<ul> <li>ClockEntryForm: Time clock interface</li> <li>TimeOffRequestForm: Time-off request submission</li> <li>IncidentReportForm: Incident reporting</li> <li>AddEmployeeDialog: User creation modal</li> </ul>"},{"location":"frontend/architecture/#4-data-display-components","title":"4. Data Display Components","text":"<ul> <li>TicketDetail: Ticket information display</li> <li>MonthlyTimeCalendar: Calendar view for time entries</li> <li>TimeClockApproval: Time entry approval interface</li> <li>TicketReview: Ticket review and approval</li> </ul>"},{"location":"frontend/architecture/#5-ui-components-shadcnui","title":"5. UI Components (shadcn/ui)","text":"<ul> <li>Button: Customizable button components</li> <li>Input: Form input components</li> <li>Dialog: Modal dialog components</li> <li>Table: Data table components</li> <li>Card: Content container components</li> </ul>"},{"location":"frontend/architecture/#api-integration","title":"API Integration","text":""},{"location":"frontend/architecture/#service-layer-architecture","title":"Service Layer Architecture","text":"<p>The service layer abstracts API communication:</p> <pre><code>class DjangoApiService {\n  private async request&lt;T&gt;(endpoint: string, options: RequestInit = {}): Promise&lt;T&gt; {\n    // Handle authentication, CSRF, error handling\n  }\n\n  async getIncidentTickets(): Promise&lt;ApiResponse&lt;IncidentTicket&gt;&gt; {\n    return this.request&lt;ApiResponse&lt;IncidentTicket&gt;&gt;('/incident-tickets/');\n  }\n\n  // ... other API methods\n}\n\nexport const djangoApi = new DjangoApiService();\n</code></pre>"},{"location":"frontend/architecture/#authentication-integration","title":"Authentication Integration","text":"<p>The frontend is ready for session-based authentication:</p> <pre><code>// CSRF token handling\nconst getCsrfToken = async (): Promise&lt;string&gt; =&gt; {\n  const response = await fetch(`${API_BASE_URL}/csrf/`, {\n    credentials: 'include',\n  });\n  const data = await response.json();\n  return data.csrfToken;\n};\n\n// Session-based requests\nconst config: RequestInit = {\n  credentials: 'include', // Include session cookies\n  headers: {\n    'Content-Type': 'application/json',\n    'X-CSRFToken': csrfToken, // CSRF protection\n  },\n};\n</code></pre>"},{"location":"frontend/architecture/#type-safety","title":"Type Safety","text":""},{"location":"frontend/architecture/#typescript-configuration","title":"TypeScript Configuration","text":"<p>The project uses strict TypeScript configuration for maximum type safety:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"noUncheckedIndexedAccess\": true,\n    \"exactOptionalPropertyTypes\": true\n  }\n}\n</code></pre>"},{"location":"frontend/architecture/#type-definitions","title":"Type Definitions","text":"<p>All data structures are defined in <code>src/types/django.ts</code>:</p> <pre><code>export interface DjangoUser {\n  id: number;\n  username: string;\n  email: string;\n  first_name: string;\n  last_name: string;\n  is_staff: boolean;\n  is_active: boolean;\n}\n\nexport interface Profile {\n  id: number;\n  user: DjangoUser;\n  full_name: string;\n  email: string;\n  phone?: string;\n  position?: string;\n  department?: string;\n  // ... other fields\n}\n</code></pre>"},{"location":"frontend/architecture/#performance-optimizations","title":"Performance Optimizations","text":""},{"location":"frontend/architecture/#code-splitting","title":"Code Splitting","text":"<p>The application uses React.lazy for route-based code splitting:</p> <pre><code>const Dashboard = React.lazy(() =&gt; import('./pages/Dashboard'));\nconst TimeKeeping = React.lazy(() =&gt; import('./pages/TimeKeeping'));\n</code></pre>"},{"location":"frontend/architecture/#query-optimization","title":"Query Optimization","text":"<p>TanStack Query provides intelligent caching and background updates:</p> <pre><code>const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      cacheTime: 10 * 60 * 1000, // 10 minutes\n      retry: 3,\n      refetchOnWindowFocus: false,\n    },\n  },\n});\n</code></pre>"},{"location":"frontend/architecture/#bundle-optimization","title":"Bundle Optimization","text":"<p>Vite provides automatic code splitting and tree shaking for optimal bundle sizes.</p>"},{"location":"frontend/architecture/#error-handling","title":"Error Handling","text":""},{"location":"frontend/architecture/#global-error-boundaries","title":"Global Error Boundaries","text":"<p>Error boundaries catch and handle component errors:</p> <pre><code>class ErrorBoundary extends React.Component {\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    // Log error to monitoring service\n    console.error('Component error:', error, errorInfo);\n  }\n}\n</code></pre>"},{"location":"frontend/architecture/#api-error-handling","title":"API Error Handling","text":"<p>The service layer provides consistent error handling:</p> <pre><code>if (!response.ok) {\n  const errorData: ApiError = await response.json().catch(() =&gt; ({}));\n  throw new Error(errorData.detail || `HTTP ${response.status}`);\n}\n</code></pre>"},{"location":"frontend/architecture/#development-workflow","title":"Development Workflow","text":""},{"location":"frontend/architecture/#hot-module-replacement","title":"Hot Module Replacement","text":"<p>Vite provides fast HMR for instant development feedback.</p>"},{"location":"frontend/architecture/#type-checking","title":"Type Checking","text":"<p>TypeScript compilation ensures type safety during development.</p>"},{"location":"frontend/architecture/#linting-and-formatting","title":"Linting and Formatting","text":"<p>ESLint and Prettier maintain code quality and consistency.</p>"},{"location":"frontend/architecture/#testing-strategy","title":"Testing Strategy","text":""},{"location":"frontend/architecture/#component-testing","title":"Component Testing","text":"<p>React Testing Library for component behavior testing.</p>"},{"location":"frontend/architecture/#type-testing","title":"Type Testing","text":"<p>TypeScript compiler catches type-related issues.</p>"},{"location":"frontend/architecture/#integration-testing","title":"Integration Testing","text":"<p>End-to-end testing with real API interactions.</p>"},{"location":"frontend/architecture/#future-considerations","title":"Future Considerations","text":""},{"location":"frontend/architecture/#backend-integration","title":"Backend Integration","text":"<p>The frontend is designed to seamlessly integrate with the planned Django backend:</p> <ul> <li>Session-based authentication ready</li> <li>API service layer matches backend endpoints</li> <li>Type definitions align with Django models</li> <li>Error handling supports backend error formats</li> </ul>"},{"location":"frontend/architecture/#scalability","title":"Scalability","text":"<p>The architecture supports future enhancements:</p> <ul> <li>Modular component structure</li> <li>Extensible service layer</li> <li>Flexible state management</li> <li>Performance optimization ready</li> </ul>"},{"location":"frontend/architecture/#progressive-web-app","title":"Progressive Web App","text":"<p>The foundation exists for PWA features:</p> <ul> <li>Service worker ready</li> <li>Offline-first architecture possible</li> <li>Push notification support ready </li> </ul>"},{"location":"frontend/context-state/","title":"Context &amp; State Management","text":"<p>This document covers the state management architecture in the Broadcast Management System frontend, including React Context patterns, custom hooks, and state synchronization strategies.</p>"},{"location":"frontend/context-state/#overview","title":"Overview","text":"<p>The application uses a layered state management approach combining React Context for global application state with TanStack Query for server state management. This provides a clean separation between local application state and server-synchronized data.</p>"},{"location":"frontend/context-state/#architecture","title":"Architecture","text":"<pre><code>graph TD\n    App[App Component] --&gt; Providers[Context Providers]\n\n    subgraph \"Global State Layer\"\n        Auth[AuthContext]\n        Settings[SettingsContext]\n        Toast[Toast Context]\n    end\n\n    subgraph \"Server State Layer\"\n        Query[TanStack Query]\n        Cache[Query Cache]\n        Background[Background Sync]\n    end\n\n    subgraph \"Component State\"\n        Local[useState]\n        Form[React Hook Form]\n        UI[UI State]\n    end\n\n    Providers --&gt; Auth\n    Providers --&gt; Settings\n    Providers --&gt; Toast\n\n    Auth --&gt; Query\n    Settings --&gt; Query\n    Query --&gt; Cache\n    Cache --&gt; Background\n\n    App --&gt; Local\n    App --&gt; Form\n    App --&gt; UI</code></pre>"},{"location":"frontend/context-state/#context-providers","title":"Context Providers","text":""},{"location":"frontend/context-state/#authcontext","title":"AuthContext","text":"<p>Manages user authentication state and profile information.</p> <pre><code>interface AuthContextType {\n  user: DjangoUser | null;          // Current authenticated user\n  profile: Profile | null;          // User's profile information\n  isLoading: boolean;               // Authentication loading state\n  login: (username: string, password: string) =&gt; Promise&lt;boolean&gt;;\n  logout: () =&gt; Promise&lt;void&gt;;\n  refreshUser: () =&gt; Promise&lt;void&gt;; // Refresh user data\n}\n</code></pre> <p>Key Features: - Session Persistence: Automatically checks for existing sessions on app load - Profile Integration: Fetches user profile data alongside authentication - Toast Integration: User feedback for login/logout actions - Error Handling: Graceful handling of authentication failures - State Synchronization: Keeps user and profile data in sync</p> <p>Usage Pattern: <pre><code>const { user, profile, login, logout, isLoading } = useAuth();\n\n// Login\nconst handleLogin = async () =&gt; {\n  const success = await login(username, password);\n  if (success) {\n    navigate('/dashboard');\n  }\n};\n\n// Logout\nconst handleLogout = async () =&gt; {\n  await logout();\n  navigate('/login');\n};\n</code></pre></p> <p>Implementation Details: <pre><code>export const AuthProvider = ({ children }: { children: React.ReactNode }) =&gt; {\n  const [user, setUser] = useState&lt;DjangoUser | null&gt;(null);\n  const [profile, setProfile] = useState&lt;Profile | null&gt;(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const refreshUser = async () =&gt; {\n    try {\n      const currentUser = await djangoApi.getCurrentUser();\n      setUser(currentUser);\n\n      // Get user profile\n      const profiles = await djangoApi.getProfiles();\n      const userProfile = profiles.results?.find(p =&gt; p.user.id === currentUser.id);\n      setProfile(userProfile || null);\n    } catch (error) {\n      setUser(null);\n      setProfile(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Check for existing session on mount\n  useEffect(() =&gt; {\n    refreshUser();\n  }, []);\n\n  // ... login, logout implementation\n};\n</code></pre></p>"},{"location":"frontend/context-state/#settingscontext","title":"SettingsContext","text":"<p>Manages application configuration data including locations, facilities, shifts, and incident types.</p> <pre><code>interface SettingsContextType {\n  locations: Location[];           // Available locations\n  shifts: Shift[];                // Defined work shifts\n  facilities: Facility[];         // Facility information\n  incidentTypes: IncidentType[];  // Incident categorization\n  getScheduledEvents: (date: string) =&gt; Promise&lt;ScheduledEvent[]&gt;;\n  refreshData: () =&gt; Promise&lt;void&gt;; // Reload all settings data\n  isLoading: boolean;              // Settings loading state\n}\n</code></pre> <p>Key Features: - Parallel Data Loading: Efficiently loads all settings data concurrently - Error Resilience: Continues operation even if some settings fail to load - Event Filtering: Provides date-based event filtering functionality - Cache Management: Handles data refresh and cache invalidation - Performance Optimization: Loads settings once and shares across components</p> <p>Usage Pattern: <pre><code>const { locations, facilities, shifts, incidentTypes, isLoading } = useSettings();\n\n// Use in form components\n&lt;Select&gt;\n  {locations.map(location =&gt; (\n    &lt;SelectItem key={location.id} value={location.id.toString()}&gt;\n      {location.name}\n    &lt;/SelectItem&gt;\n  ))}\n&lt;/Select&gt;\n</code></pre></p> <p>Implementation Details: <pre><code>export const SettingsProvider = ({ children }: { children: React.ReactNode }) =&gt; {\n  const [locations, setLocations] = useState&lt;Location[]&gt;([]);\n  const [shifts, setShifts] = useState&lt;Shift[]&gt;([]);\n  const [facilities, setFacilities] = useState&lt;Facility[]&gt;([]);\n  const [incidentTypes, setIncidentTypes] = useState&lt;IncidentType[]&gt;([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const refreshData = async () =&gt; {\n    try {\n      setIsLoading(true);\n      const [locationsRes, shiftsRes, facilitiesRes, incidentTypesRes] = await Promise.all([\n        djangoApi.getLocations(),\n        djangoApi.getShifts(),\n        djangoApi.getFacilities(),\n        djangoApi.getIncidentTypes(),\n      ]);\n\n      setLocations(locationsRes.results || []);\n      setShifts(shiftsRes.results || []);\n      setFacilities(facilitiesRes.results || []);\n      setIncidentTypes(incidentTypesRes.results || []);\n    } catch (error) {\n      console.error('Failed to load settings data:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Load settings on mount\n  useEffect(() =&gt; {\n    refreshData();\n  }, []);\n};\n</code></pre></p>"},{"location":"frontend/context-state/#server-state-management","title":"Server State Management","text":""},{"location":"frontend/context-state/#tanstack-query-integration","title":"TanStack Query Integration","text":"<p>The application uses TanStack Query for efficient server state management, providing caching, background updates, and optimistic updates.</p> <p>Configuration: <pre><code>const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 5 * 60 * 1000,        // 5 minutes\n      cacheTime: 10 * 60 * 1000,       // 10 minutes\n      retry: 3,                         // Retry failed requests\n      refetchOnWindowFocus: false,      // Disable refetch on focus\n    },\n  },\n});\n</code></pre></p> <p>Query Patterns: <pre><code>// List queries with pagination\nconst useIncidentTickets = () =&gt; {\n  return useQuery({\n    queryKey: ['incident-tickets'],\n    queryFn: () =&gt; djangoApi.getIncidentTickets(),\n    staleTime: 5 * 60 * 1000,\n  });\n};\n\n// Detail queries with parameters\nconst useIncidentTicket = (id: number) =&gt; {\n  return useQuery({\n    queryKey: ['incident-tickets', id],\n    queryFn: () =&gt; djangoApi.getIncidentTicket(id),\n    enabled: !!id, // Only run if id is provided\n  });\n};\n\n// Mutation with optimistic updates\nconst useCreateIncidentTicket = () =&gt; {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: Partial&lt;IncidentTicket&gt;) =&gt; \n      djangoApi.createIncidentTicket(data),\n    onSuccess: () =&gt; {\n      // Invalidate and refetch\n      queryClient.invalidateQueries(['incident-tickets']);\n    },\n  });\n};\n</code></pre></p>"},{"location":"frontend/context-state/#custom-hooks","title":"Custom Hooks","text":""},{"location":"frontend/context-state/#useauth-hook","title":"useAuth Hook","text":"<p>Provides access to authentication context with type safety.</p> <pre><code>export const useAuth = () =&gt; {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n</code></pre>"},{"location":"frontend/context-state/#usesettings-hook","title":"useSettings Hook","text":"<p>Provides access to settings context with type safety.</p> <pre><code>export const useSettings = () =&gt; {\n  const context = useContext(SettingsContext);\n  if (!context) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n  return context;\n};\n</code></pre>"},{"location":"frontend/context-state/#usetoast-hook","title":"useToast Hook","text":"<p>Provides toast notification functionality (from shadcn/ui).</p> <pre><code>// Usage\nconst { toast } = useToast();\n\ntoast({\n  title: \"Success\",\n  description: \"Operation completed successfully\",\n});\n\ntoast({\n  title: \"Error\",\n  description: \"Something went wrong\",\n  variant: \"destructive\",\n});\n</code></pre>"},{"location":"frontend/context-state/#usemobile-hook","title":"useMobile Hook","text":"<p>Detects mobile device screens for responsive behavior.</p> <pre><code>export function useMobile() {\n  const [isMobile, setIsMobile] = useState(false);\n\n  useEffect(() =&gt; {\n    const checkDevice = () =&gt; {\n      setIsMobile(window.innerWidth &lt; 768);\n    };\n\n    checkDevice();\n    window.addEventListener('resize', checkDevice);\n\n    return () =&gt; window.removeEventListener('resize', checkDevice);\n  }, []);\n\n  return isMobile;\n}\n</code></pre>"},{"location":"frontend/context-state/#state-synchronization-patterns","title":"State Synchronization Patterns","text":""},{"location":"frontend/context-state/#context-query-integration","title":"Context + Query Integration","text":"<p>Contexts handle application state while TanStack Query manages server state:</p> <pre><code>// In AuthContext\nconst login = async (username: string, password: string) =&gt; {\n  const user = await djangoApi.login(username, password);\n  setUser(user); // Update context\n\n  // TanStack Query will handle profile data\n  queryClient.invalidateQueries(['profiles']);\n  return true;\n};\n</code></pre>"},{"location":"frontend/context-state/#optimistic-updates","title":"Optimistic Updates","text":"<p>For better UX, mutations can update the UI before server confirmation:</p> <pre><code>const useUpdateTimeEntry = () =&gt; {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: number, data: Partial&lt;TimeEntry&gt; }) =&gt;\n      djangoApi.updateTimeEntry(id, data),\n    onMutate: async ({ id, data }) =&gt; {\n      // Cancel outgoing refetches\n      await queryClient.cancelQueries(['time-entries']);\n\n      // Snapshot previous value\n      const previousEntries = queryClient.getQueryData(['time-entries']);\n\n      // Optimistically update\n      queryClient.setQueryData(['time-entries'], (old: any) =&gt; ({\n        ...old,\n        results: old.results.map((entry: TimeEntry) =&gt; \n          entry.id === id ? { ...entry, ...data } : entry\n        )\n      }));\n\n      return { previousEntries };\n    },\n    onError: (err, variables, context) =&gt; {\n      // Rollback on error\n      if (context?.previousEntries) {\n        queryClient.setQueryData(['time-entries'], context.previousEntries);\n      }\n    },\n    onSettled: () =&gt; {\n      // Always refetch after error or success\n      queryClient.invalidateQueries(['time-entries']);\n    },\n  });\n};\n</code></pre>"},{"location":"frontend/context-state/#provider-hierarchy","title":"Provider Hierarchy","text":"<p>The application providers are structured in a specific hierarchy for optimal functionality:</p> <pre><code>function App() {\n  return (\n    &lt;QueryClientProvider client={queryClient}&gt;\n      &lt;AuthProvider&gt;\n        &lt;TooltipProvider&gt;\n          &lt;BrowserRouter&gt;\n            &lt;Routes&gt;\n              &lt;Route path=\"/login\" element={&lt;Login /&gt;} /&gt;\n              &lt;Route path=\"/*\" element={\n                &lt;ProtectedRoute&gt;\n                  &lt;Layout&gt;\n                    &lt;SettingsProvider&gt;\n                      {/* Page components */}\n                    &lt;/SettingsProvider&gt;\n                  &lt;/Layout&gt;\n                &lt;/ProtectedRoute&gt;\n              } /&gt;\n            &lt;/Routes&gt;\n          &lt;/BrowserRouter&gt;\n          &lt;Toaster /&gt;\n          &lt;Sonner /&gt;\n        &lt;/TooltipProvider&gt;\n      &lt;/AuthProvider&gt;\n    &lt;/QueryClientProvider&gt;\n  );\n}\n</code></pre> <p>Provider Order Explanation: 1. QueryClientProvider: Must be at the top to provide TanStack Query context 2. AuthProvider: Needs Query context for API calls 3. TooltipProvider: UI enhancement for tooltips 4. BrowserRouter: Routing context for navigation 5. SettingsProvider: Nested inside protected routes, needs auth context</p>"},{"location":"frontend/context-state/#performance-considerations","title":"Performance Considerations","text":""},{"location":"frontend/context-state/#context-optimization","title":"Context Optimization","text":"<ul> <li>Value Memoization: Context values are memoized to prevent unnecessary re-renders</li> <li>Selective Re-renders: Components only re-render when needed context values change</li> <li>Lazy Loading: Settings are loaded only when needed</li> </ul>"},{"location":"frontend/context-state/#query-optimization","title":"Query Optimization","text":"<ul> <li>Stale-While-Revalidate: Data remains available while refreshing in background</li> <li>Intelligent Caching: Reduces redundant network requests</li> <li>Background Updates: Keeps data fresh without blocking UI</li> </ul>"},{"location":"frontend/context-state/#memory-management","title":"Memory Management","text":"<ul> <li>Cleanup: Effect cleanup prevents memory leaks</li> <li>Query Garbage Collection: Automatic cleanup of unused query data</li> <li>Context Cleanup: Proper context cleanup on unmount</li> </ul>"},{"location":"frontend/context-state/#error-handling","title":"Error Handling","text":""},{"location":"frontend/context-state/#context-error-boundaries","title":"Context Error Boundaries","text":"<pre><code>class ContextErrorBoundary extends React.Component {\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    if (error.message.includes('must be used within')) {\n      // Handle context usage errors\n      console.error('Context usage error:', error);\n    }\n  }\n}\n</code></pre>"},{"location":"frontend/context-state/#query-error-handling","title":"Query Error Handling","text":"<pre><code>const { data, error, isError } = useQuery({\n  queryKey: ['data'],\n  queryFn: fetchData,\n  onError: (error) =&gt; {\n    toast({\n      title: \"Error\",\n      description: error.message,\n      variant: \"destructive\",\n    });\n  },\n});\n</code></pre>"},{"location":"frontend/context-state/#testing-strategies","title":"Testing Strategies","text":""},{"location":"frontend/context-state/#context-testing","title":"Context Testing","text":"<pre><code>// Test wrapper for contexts\nconst renderWithContext = (component: React.ReactElement) =&gt; {\n  return render(\n    &lt;QueryClientProvider client={queryClient}&gt;\n      &lt;AuthProvider&gt;\n        {component}\n      &lt;/AuthProvider&gt;\n    &lt;/QueryClientProvider&gt;\n  );\n};\n</code></pre>"},{"location":"frontend/context-state/#mock-providers","title":"Mock Providers","text":"<pre><code>// Mock context for testing\nconst MockAuthProvider = ({ children, value }) =&gt; (\n  &lt;AuthContext.Provider value={value}&gt;\n    {children}\n  &lt;/AuthContext.Provider&gt;\n);\n</code></pre>"},{"location":"frontend/context-state/#best-practices","title":"Best Practices","text":""},{"location":"frontend/context-state/#context-design","title":"Context Design","text":"<ul> <li>Single Responsibility: Each context handles one domain</li> <li>Type Safety: Full TypeScript integration with proper interfaces</li> <li>Error Boundaries: Graceful error handling for context usage</li> <li>Performance: Optimize re-renders with proper dependency management</li> </ul>"},{"location":"frontend/context-state/#state-updates","title":"State Updates","text":"<ul> <li>Immutable Updates: Always create new state objects</li> <li>Async Handling: Proper loading states for async operations</li> <li>Error States: Handle and display errors appropriately</li> <li>Optimistic Updates: Improve perceived performance with optimistic updates</li> </ul>"},{"location":"frontend/context-state/#developer-experience","title":"Developer Experience","text":"<ul> <li>Clear APIs: Intuitive hook interfaces</li> <li>Good Defaults: Sensible default values and configurations</li> <li>Error Messages: Helpful error messages for debugging</li> <li>Documentation: Clear usage examples and patterns </li> </ul>"},{"location":"frontend/routing/","title":"Routing","text":"<p>This document covers the routing architecture in the Broadcast Management System frontend, including React Router configuration, route protection, navigation patterns, and routing best practices.</p>"},{"location":"frontend/routing/#overview","title":"Overview","text":"<p>The application uses React Router v6 for client-side navigation with a comprehensive routing system that includes route protection, nested layouts, and dynamic routing patterns. The routing structure is designed to provide a smooth user experience while maintaining security through authentication-based route protection.</p>"},{"location":"frontend/routing/#routing-architecture","title":"Routing Architecture","text":"<pre><code>graph TD\n    Router[BrowserRouter] --&gt; Routes[Routes Container]\n    Routes --&gt; Public[Public Routes]\n    Routes --&gt; Protected[Protected Routes]\n\n    Public --&gt; Login[/login]\n\n    Protected --&gt; ProtectedRoute[ProtectedRoute Wrapper]\n    ProtectedRoute --&gt; Layout[Layout Wrapper]\n    Layout --&gt; Settings[SettingsProvider]\n    Settings --&gt; Pages[Page Components]\n\n    subgraph \"Main Navigation\"\n        Dashboard[/ - Dashboard]\n        TimeKeeping[/time-keeping]\n        Schedule[/schedule]\n        Reports[/reports]\n    end\n\n    subgraph \"Operations\"\n        IncidentReport[/incident-report]\n        ChangeRequest[/change-request]\n        SystemCheck[/system-check]\n    end\n\n    subgraph \"Management\"\n        Management[/management]\n        Analytics[/analytics]\n        Employees[/employees]\n        EmployeeDetail[/employees/:id]\n        Scheduling[/scheduling]\n    end\n\n    subgraph \"Support\"\n        Engineering[/engineering]\n        ServiceTickets[/service-tickets]\n        IncidentTickets[/incident-tickets]\n        Settings_Page[/settings]\n    end\n\n    Pages --&gt; Dashboard\n    Pages --&gt; TimeKeeping\n    Pages --&gt; Schedule\n    Pages --&gt; Reports\n    Pages --&gt; IncidentReport\n    Pages --&gt; ChangeRequest\n    Pages --&gt; SystemCheck\n    Pages --&gt; Management\n    Pages --&gt; Analytics\n    Pages --&gt; Employees\n    Pages --&gt; EmployeeDetail\n    Pages --&gt; Scheduling\n    Pages --&gt; Engineering\n    Pages --&gt; ServiceTickets\n    Pages --&gt; IncidentTickets\n    Pages --&gt; Settings_Page\n\n    Protected --&gt; NotFound[/* - 404 Page]\n\n    style Protected fill:#4da6ff\n    style Public fill:#52c41a\n    style ProtectedRoute fill:#ff7875</code></pre>"},{"location":"frontend/routing/#route-configuration","title":"Route Configuration","text":""},{"location":"frontend/routing/#main-app-routes","title":"Main App Routes","text":"<pre><code>const App = () =&gt; {\n  return (\n    &lt;QueryClientProvider client={queryClient}&gt;\n      &lt;AuthProvider&gt;\n        &lt;TooltipProvider&gt;\n          &lt;BrowserRouter&gt;\n            &lt;Routes&gt;\n              {/* Public Routes */}\n              &lt;Route path=\"/login\" element={&lt;Login /&gt;} /&gt;\n\n              {/* Protected Routes */}\n              &lt;Route path=\"/\" element={\n                &lt;ProtectedRoute&gt;\n                  &lt;Layout&gt;\n                    &lt;Dashboard /&gt;\n                  &lt;/Layout&gt;\n                &lt;/ProtectedRoute&gt;\n              } /&gt;\n\n              &lt;Route path=\"/time-keeping\" element={\n                &lt;ProtectedRoute&gt;\n                  &lt;Layout&gt;\n                    &lt;TimeKeeping /&gt;\n                  &lt;/Layout&gt;\n                &lt;/ProtectedRoute&gt;\n              } /&gt;\n\n              &lt;Route path=\"/schedule\" element={\n                &lt;ProtectedRoute&gt;\n                  &lt;Layout&gt;\n                    &lt;Schedule /&gt;\n                  &lt;/Layout&gt;\n                &lt;/ProtectedRoute&gt;\n              } /&gt;\n\n              {/* Settings-dependent Routes */}\n              &lt;Route path=\"/incident-report\" element={\n                &lt;ProtectedRoute&gt;\n                  &lt;Layout&gt;\n                    &lt;SettingsProvider&gt;\n                      &lt;IncidentReport /&gt;\n                    &lt;/SettingsProvider&gt;\n                  &lt;/Layout&gt;\n                &lt;/ProtectedRoute&gt;\n              } /&gt;\n\n              &lt;Route path=\"/change-request\" element={\n                &lt;ProtectedRoute&gt;\n                  &lt;Layout&gt;\n                    &lt;SettingsProvider&gt;\n                      &lt;ChangeRequest /&gt;\n                    &lt;/SettingsProvider&gt;\n                  &lt;/Layout&gt;\n                &lt;/ProtectedRoute&gt;\n              } /&gt;\n\n              &lt;Route path=\"/system-check\" element={\n                &lt;ProtectedRoute&gt;\n                  &lt;Layout&gt;\n                    &lt;SettingsProvider&gt;\n                      &lt;SystemCheck /&gt;\n                    &lt;/SettingsProvider&gt;\n                  &lt;/Layout&gt;\n                &lt;/ProtectedRoute&gt;\n              } /&gt;\n\n              {/* Management Routes */}\n              &lt;Route path=\"/management\" element={\n                &lt;ProtectedRoute&gt;\n                  &lt;Layout&gt;\n                    &lt;Management /&gt;\n                  &lt;/Layout&gt;\n                &lt;/ProtectedRoute&gt;\n              } /&gt;\n\n              &lt;Route path=\"/analytics\" element={\n                &lt;ProtectedRoute&gt;\n                  &lt;Layout&gt;\n                    &lt;Analytics /&gt;\n                  &lt;/Layout&gt;\n                &lt;/ProtectedRoute&gt;\n              } /&gt;\n\n              {/* Employee Management */}\n              &lt;Route path=\"/employees\" element={\n                &lt;ProtectedRoute&gt;\n                  &lt;Layout&gt;\n                    &lt;EmployeeManagement /&gt;\n                  &lt;/Layout&gt;\n                &lt;/ProtectedRoute&gt;\n              } /&gt;\n\n              &lt;Route path=\"/employees/:id\" element={\n                &lt;ProtectedRoute&gt;\n                  &lt;Layout&gt;\n                    &lt;EmployeeDetail /&gt;\n                  &lt;/Layout&gt;\n                &lt;/ProtectedRoute&gt;\n              } /&gt;\n\n              {/* Scheduling */}\n              &lt;Route path=\"/scheduling\" element={\n                &lt;ProtectedRoute&gt;\n                  &lt;Layout&gt;\n                    &lt;SettingsProvider&gt;\n                      &lt;Scheduling /&gt;\n                    &lt;/SettingsProvider&gt;\n                  &lt;/Layout&gt;\n                &lt;/ProtectedRoute&gt;\n              } /&gt;\n\n              {/* Reports */}\n              &lt;Route path=\"/reports\" element={\n                &lt;ProtectedRoute&gt;\n                  &lt;Layout&gt;\n                    &lt;Reports /&gt;\n                  &lt;/Layout&gt;\n                &lt;/ProtectedRoute&gt;\n              } /&gt;\n\n              {/* Settings */}\n              &lt;Route path=\"/settings\" element={\n                &lt;ProtectedRoute&gt;\n                  &lt;Layout&gt;\n                    &lt;SettingsProvider&gt;\n                      &lt;Settings /&gt;\n                    &lt;/SettingsProvider&gt;\n                  &lt;/Layout&gt;\n                &lt;/ProtectedRoute&gt;\n              } /&gt;\n\n              {/* Engineering */}\n              &lt;Route path=\"/engineering\" element={\n                &lt;ProtectedRoute&gt;\n                  &lt;Layout&gt;\n                    &lt;Engineering /&gt;\n                  &lt;/Layout&gt;\n                &lt;/ProtectedRoute&gt;\n              } /&gt;\n\n              {/* Support Tickets */}\n              &lt;Route path=\"/service-tickets\" element={\n                &lt;ProtectedRoute&gt;\n                  &lt;Layout&gt;\n                    &lt;ServiceTickets /&gt;\n                  &lt;/Layout&gt;\n                &lt;/ProtectedRoute&gt;\n              } /&gt;\n\n              &lt;Route path=\"/incident-tickets\" element={\n                &lt;ProtectedRoute&gt;\n                  &lt;Layout&gt;\n                    &lt;IncidentTickets /&gt;\n                  &lt;/Layout&gt;\n                &lt;/ProtectedRoute&gt;\n              } /&gt;\n\n              {/* 404 Fallback */}\n              &lt;Route path=\"*\" element={&lt;NotFound /&gt;} /&gt;\n            &lt;/Routes&gt;\n          &lt;/BrowserRouter&gt;\n          &lt;Toaster /&gt;\n          &lt;Sonner /&gt;\n        &lt;/TooltipProvider&gt;\n      &lt;/AuthProvider&gt;\n    &lt;/QueryClientProvider&gt;\n  );\n};\n</code></pre>"},{"location":"frontend/routing/#route-protection","title":"Route Protection","text":""},{"location":"frontend/routing/#protectedroute-component","title":"ProtectedRoute Component","text":"<p>The <code>ProtectedRoute</code> component ensures that only authenticated users can access protected areas of the application.</p> <pre><code>import React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from '@/contexts/AuthContext';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n}\n\nconst ProtectedRoute = ({ children }: ProtectedRouteProps) =&gt; {\n  const { user, isLoading } = useAuth();\n\n  // Show loading state while checking authentication\n  if (isLoading) {\n    return (\n      &lt;div className=\"min-h-screen flex items-center justify-center\"&gt;\n        &lt;div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-gray-900\"&gt;&lt;/div&gt;\n      &lt;/div&gt;\n    );\n  }\n\n  // Redirect to login if not authenticated\n  if (!user) {\n    return &lt;Navigate to=\"/login\" replace /&gt;;\n  }\n\n  // Render protected content\n  return &lt;&gt;{children}&lt;/&gt;;\n};\n\nexport default ProtectedRoute;\n</code></pre> <p>Key Features: - Authentication Check: Verifies user authentication status - Loading States: Shows loading indicator during auth check - Automatic Redirect: Redirects unauthenticated users to login - Route Preservation: Maintains intended route for post-login redirect</p>"},{"location":"frontend/routing/#authentication-flow","title":"Authentication Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Router\n    participant ProtectedRoute\n    participant AuthContext\n    participant Login\n    participant Dashboard\n\n    User-&gt;&gt;Router: Navigate to /dashboard\n    Router-&gt;&gt;ProtectedRoute: Check authentication\n    ProtectedRoute-&gt;&gt;AuthContext: Get user state\n\n    alt User not authenticated\n        AuthContext--&gt;&gt;ProtectedRoute: user = null\n        ProtectedRoute-&gt;&gt;Login: Redirect to /login\n        User-&gt;&gt;Login: Enter credentials\n        Login-&gt;&gt;AuthContext: Call login()\n        AuthContext--&gt;&gt;Login: Success\n        Login-&gt;&gt;Router: Navigate to /dashboard\n    else User authenticated\n        AuthContext--&gt;&gt;ProtectedRoute: user = {...}\n        ProtectedRoute-&gt;&gt;Dashboard: Render dashboard\n    end</code></pre>"},{"location":"frontend/routing/#navigation-patterns","title":"Navigation Patterns","text":""},{"location":"frontend/routing/#sidebar-navigation","title":"Sidebar Navigation","text":"<p>The sidebar navigation provides the primary navigation interface with active route highlighting.</p> <pre><code>// Sidebar navigation items with route matching\nconst mainMenuItems = [\n  { title: 'Dashboard', url: '/', icon: Home },\n  { title: 'Time Keeping', url: '/time-keeping', icon: Clock },\n  { title: 'Schedule', url: '/schedule', icon: Calendar },\n  { title: 'Report Incident', url: '/incident-report', icon: AlertTriangle },\n  { title: 'Change Request', url: '/change-request', icon: FileText },\n  { title: 'System Check', url: '/system-check', icon: Wrench },\n];\n\nconst engineeringItems = [\n  { title: 'Engineering Dashboard', url: '/engineering', icon: Shield },\n  { title: 'Service Tickets', url: '/service-tickets', icon: Wrench },\n];\n\nconst managementItems = [\n  { title: 'Management Dashboard', url: '/management', icon: BarChart3 },\n  { title: 'Analytics', url: '/analytics', icon: TrendingUp },\n  { title: 'Employee Management', url: '/employees', icon: Users },\n  { title: 'Scheduling', url: '/scheduling', icon: Calendar },\n  { title: 'Reports', url: '/reports', icon: FileText },\n];\n</code></pre>"},{"location":"frontend/routing/#active-route-detection","title":"Active Route Detection","text":"<pre><code>import { useLocation } from 'react-router-dom';\n\nconst AppSidebar = () =&gt; {\n  const location = useLocation();\n\n  // Check if current route matches menu item\n  const isActive = (url: string) =&gt; {\n    if (url === '/') {\n      return location.pathname === '/';\n    }\n    return location.pathname.startsWith(url);\n  };\n\n  return (\n    &lt;Sidebar&gt;\n      {mainMenuItems.map((item) =&gt; (\n        &lt;SidebarMenuItem key={item.url}&gt;\n          &lt;SidebarMenuButton asChild isActive={isActive(item.url)}&gt;\n            &lt;NavLink to={item.url}&gt;\n              &lt;item.icon /&gt;\n              {item.title}\n            &lt;/NavLink&gt;\n          &lt;/SidebarMenuButton&gt;\n        &lt;/SidebarMenuItem&gt;\n      ))}\n    &lt;/Sidebar&gt;\n  );\n};\n</code></pre>"},{"location":"frontend/routing/#dynamic-routing","title":"Dynamic Routing","text":""},{"location":"frontend/routing/#url-parameters","title":"URL Parameters","text":"<p>The application uses URL parameters for dynamic routing, particularly for detail views.</p> <pre><code>// Employee detail route with parameter\n&lt;Route path=\"/employees/:id\" element={\n  &lt;ProtectedRoute&gt;\n    &lt;Layout&gt;\n      &lt;EmployeeDetail /&gt;\n    &lt;/Layout&gt;\n  &lt;/ProtectedRoute&gt;\n} /&gt;\n\n// In EmployeeDetail component\nimport { useParams } from 'react-router-dom';\n\nconst EmployeeDetail = () =&gt; {\n  const { id } = useParams&lt;{ id: string }&gt;();\n  const employeeId = parseInt(id || '0', 10);\n\n  // Use the ID to fetch employee data\n  const { data: employee, isLoading } = useQuery({\n    queryKey: ['employee', employeeId],\n    queryFn: () =&gt; djangoApi.getProfile(employeeId),\n    enabled: !!employeeId,\n  });\n\n  if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;;\n  if (!employee) return &lt;div&gt;Employee not found&lt;/div&gt;;\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{employee.full_name}&lt;/h1&gt;\n      {/* Employee details */}\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"frontend/routing/#query-parameters","title":"Query Parameters","text":"<p>Query parameters are used for filtering and search functionality.</p> <pre><code>// Using search params for filtering\nimport { useSearchParams } from 'react-router-dom';\n\nconst EmployeeManagement = () =&gt; {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const department = searchParams.get('department');\n  const status = searchParams.get('status');\n  const search = searchParams.get('search');\n\n  // Update URL when filters change\n  const updateFilter = (key: string, value: string) =&gt; {\n    const newParams = new URLSearchParams(searchParams);\n    if (value) {\n      newParams.set(key, value);\n    } else {\n      newParams.delete(key);\n    }\n    setSearchParams(newParams);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;input\n        value={search || ''}\n        onChange={(e) =&gt; updateFilter('search', e.target.value)}\n        placeholder=\"Search employees...\"\n      /&gt;\n      {/* Filter components */}\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"frontend/routing/#navigation-utilities","title":"Navigation Utilities","text":""},{"location":"frontend/routing/#programmatic-navigation","title":"Programmatic Navigation","text":"<pre><code>import { useNavigate } from 'react-router-dom';\n\nconst ExampleComponent = () =&gt; {\n  const navigate = useNavigate();\n\n  const handleEmployeeClick = (employeeId: number) =&gt; {\n    navigate(`/employees/${employeeId}`);\n  };\n\n  const handleBack = () =&gt; {\n    navigate(-1); // Go back\n  };\n\n  const handleRedirect = () =&gt; {\n    navigate('/dashboard', { replace: true }); // Replace current entry\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={handleBack}&gt;Back&lt;/button&gt;\n      &lt;button onClick={() =&gt; handleEmployeeClick(123)}&gt;View Employee&lt;/button&gt;\n      &lt;button onClick={handleRedirect}&gt;Go to Dashboard&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"frontend/routing/#route-guards-with-conditions","title":"Route Guards with Conditions","text":"<pre><code>// Advanced route protection with role-based access\nconst RoleProtectedRoute = ({ \n  children, \n  requiredRole \n}: { \n  children: React.ReactNode;\n  requiredRole: string;\n}) =&gt; {\n  const { user, profile } = useAuth();\n  const navigate = useNavigate();\n\n  useEffect(() =&gt; {\n    if (user &amp;&amp; profile &amp;&amp; !hasRole(profile, requiredRole)) {\n      navigate('/dashboard', { replace: true });\n    }\n  }, [user, profile, requiredRole, navigate]);\n\n  if (!user) {\n    return &lt;Navigate to=\"/login\" replace /&gt;;\n  }\n\n  if (profile &amp;&amp; !hasRole(profile, requiredRole)) {\n    return &lt;Navigate to=\"/dashboard\" replace /&gt;;\n  }\n\n  return &lt;&gt;{children}&lt;/&gt;;\n};\n\n// Helper function\nconst hasRole = (profile: Profile, role: string): boolean =&gt; {\n  return profile.department === role || profile.position?.includes(role);\n};\n</code></pre>"},{"location":"frontend/routing/#route-hierarchy","title":"Route Hierarchy","text":""},{"location":"frontend/routing/#layout-nesting","title":"Layout Nesting","text":"<p>The routing system uses a hierarchical layout structure:</p> <ol> <li>App Level: <code>QueryClientProvider</code>, <code>AuthProvider</code>, <code>BrowserRouter</code></li> <li>Route Level: <code>ProtectedRoute</code> wrapper for authentication</li> <li>Layout Level: <code>Layout</code> component for consistent UI structure</li> <li>Context Level: <code>SettingsProvider</code> for routes requiring settings data</li> <li>Page Level: Individual page components</li> </ol> <pre><code>// Nested structure example\n&lt;BrowserRouter&gt;\n  &lt;Routes&gt;\n    &lt;Route path=\"/admin/*\" element={\n      &lt;ProtectedRoute&gt;\n        &lt;AdminLayout&gt;\n          &lt;Routes&gt;\n            &lt;Route path=\"users\" element={&lt;AdminUsers /&gt;} /&gt;\n            &lt;Route path=\"settings\" element={&lt;AdminSettings /&gt;} /&gt;\n            &lt;Route path=\"*\" element={&lt;AdminDashboard /&gt;} /&gt;\n          &lt;/Routes&gt;\n        &lt;/AdminLayout&gt;\n      &lt;/ProtectedRoute&gt;\n    } /&gt;\n  &lt;/Routes&gt;\n&lt;/BrowserRouter&gt;\n</code></pre>"},{"location":"frontend/routing/#error-handling","title":"Error Handling","text":""},{"location":"frontend/routing/#404-not-found","title":"404 Not Found","text":"<pre><code>const NotFound = () =&gt; {\n  const navigate = useNavigate();\n\n  return (\n    &lt;div className=\"min-h-screen flex items-center justify-center bg-gray-50\"&gt;\n      &lt;div className=\"text-center\"&gt;\n        &lt;h1 className=\"text-6xl font-bold text-gray-900\"&gt;404&lt;/h1&gt;\n        &lt;p className=\"text-xl text-gray-600 mb-4\"&gt;Page not found&lt;/p&gt;\n        &lt;p className=\"text-gray-500 mb-8\"&gt;\n          The page you're looking for doesn't exist.\n        &lt;/p&gt;\n        &lt;button\n          onClick={() =&gt; navigate('/dashboard')}\n          className=\"bg-blue-600 text-white px-6 py-3 rounded-md hover:bg-blue-700\"\n        &gt;\n          Go to Dashboard\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"frontend/routing/#route-error-boundaries","title":"Route Error Boundaries","text":"<pre><code>class RouteErrorBoundary extends React.Component&lt;\n  { children: React.ReactNode },\n  { hasError: boolean }\n&gt; {\n  constructor(props: { children: React.ReactNode }) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('Route error:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        &lt;div className=\"min-h-screen flex items-center justify-center\"&gt;\n          &lt;div className=\"text-center\"&gt;\n            &lt;h1 className=\"text-xl font-bold text-red-600\"&gt;Something went wrong&lt;/h1&gt;\n            &lt;button\n              onClick={() =&gt; window.location.reload()}\n              className=\"mt-4 bg-blue-600 text-white px-4 py-2 rounded\"\n            &gt;\n              Reload Page\n            &lt;/button&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      );\n    }\n\n    return this.props.children;\n  }\n}\n</code></pre>"},{"location":"frontend/routing/#performance-optimizations","title":"Performance Optimizations","text":""},{"location":"frontend/routing/#code-splitting","title":"Code Splitting","text":"<pre><code>import { lazy, Suspense } from 'react';\n\n// Lazy load components for code splitting\nconst Dashboard = lazy(() =&gt; import('./pages/Dashboard'));\nconst TimeKeeping = lazy(() =&gt; import('./pages/TimeKeeping'));\nconst Settings = lazy(() =&gt; import('./pages/Settings'));\n\n// Use with Suspense\n&lt;Route path=\"/dashboard\" element={\n  &lt;ProtectedRoute&gt;\n    &lt;Layout&gt;\n      &lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;\n        &lt;Dashboard /&gt;\n      &lt;/Suspense&gt;\n    &lt;/Layout&gt;\n  &lt;/ProtectedRoute&gt;\n} /&gt;\n</code></pre>"},{"location":"frontend/routing/#route-preloading","title":"Route Preloading","text":"<pre><code>// Preload routes on hover\nconst NavLink = ({ to, children }: { to: string; children: React.ReactNode }) =&gt; {\n  const handleMouseEnter = () =&gt; {\n    // Preload the route component\n    import(`./pages/${to.slice(1)}`);\n  };\n\n  return (\n    &lt;Link to={to} onMouseEnter={handleMouseEnter}&gt;\n      {children}\n    &lt;/Link&gt;\n  );\n};\n</code></pre>"},{"location":"frontend/routing/#testing-strategies","title":"Testing Strategies","text":""},{"location":"frontend/routing/#route-testing","title":"Route Testing","text":"<pre><code>import { render, screen } from '@testing-library/react';\nimport { MemoryRouter } from 'react-router-dom';\nimport App from './App';\n\ndescribe('Routing', () =&gt; {\n  test('renders dashboard on root path', () =&gt; {\n    render(\n      &lt;MemoryRouter initialEntries={['/']}&gt;\n        &lt;App /&gt;\n      &lt;/MemoryRouter&gt;\n    );\n\n    expect(screen.getByText('Dashboard')).toBeInTheDocument();\n  });\n\n  test('redirects to login when not authenticated', () =&gt; {\n    render(\n      &lt;MemoryRouter initialEntries={['/dashboard']}&gt;\n        &lt;App /&gt;\n      &lt;/MemoryRouter&gt;\n    );\n\n    expect(screen.getByText('Login')).toBeInTheDocument();\n  });\n\n  test('renders 404 for unknown routes', () =&gt; {\n    render(\n      &lt;MemoryRouter initialEntries={['/unknown-route']}&gt;\n        &lt;App /&gt;\n      &lt;/MemoryRouter&gt;\n    );\n\n    expect(screen.getByText('404')).toBeInTheDocument();\n  });\n});\n</code></pre>"},{"location":"frontend/routing/#navigation-testing","title":"Navigation Testing","text":"<pre><code>import { fireEvent } from '@testing-library/react';\nimport { useNavigate } from 'react-router-dom';\n\njest.mock('react-router-dom', () =&gt; ({\n  ...jest.requireActual('react-router-dom'),\n  useNavigate: jest.fn(),\n}));\n\ntest('navigates on button click', () =&gt; {\n  const mockNavigate = jest.fn();\n  (useNavigate as jest.Mock).mockReturnValue(mockNavigate);\n\n  render(&lt;YourComponent /&gt;);\n\n  fireEvent.click(screen.getByText('Go to Dashboard'));\n\n  expect(mockNavigate).toHaveBeenCalledWith('/dashboard');\n});\n</code></pre>"},{"location":"frontend/routing/#best-practices","title":"Best Practices","text":""},{"location":"frontend/routing/#route-organization","title":"Route Organization","text":"<ul> <li>Consistent Structure: All protected routes follow the same wrapper pattern</li> <li>Logical Grouping: Related routes are grouped together</li> <li>Settings Context: Only include SettingsProvider where needed</li> <li>Clear Hierarchy: Maintain clear parent-child relationships</li> </ul>"},{"location":"frontend/routing/#navigation-ux","title":"Navigation UX","text":"<ul> <li>Active States: Always show current active route</li> <li>Loading States: Provide feedback during route transitions</li> <li>Error Handling: Graceful error handling with fallback UI</li> <li>Accessibility: Proper focus management and screen reader support</li> </ul>"},{"location":"frontend/routing/#performance","title":"Performance","text":"<ul> <li>Code Splitting: Lazy load routes for better performance</li> <li>Preloading: Preload routes on user interaction</li> <li>Caching: Leverage React Query for data persistence across routes</li> <li>Bundle Optimization: Optimize route-based code splitting</li> </ul>"},{"location":"frontend/routing/#security","title":"Security","text":"<ul> <li>Route Protection: Protect all sensitive routes</li> <li>Role-based Access: Implement role-based route protection where needed</li> <li>Session Validation: Validate authentication on protected routes</li> <li>Secure Redirects: Prevent open redirect vulnerabilities</li> </ul>"},{"location":"frontend/routing/#future-enhancements","title":"Future Enhancements","text":""},{"location":"frontend/routing/#planned-improvements","title":"Planned Improvements","text":"<ul> <li>Nested Routing: Implement nested routing for complex page structures</li> <li>Route Analytics: Track route usage and performance</li> <li>Dynamic Imports: Enhance code splitting with dynamic imports</li> <li>Route Animations: Add smooth transitions between routes</li> <li>Breadcrumb Navigation: Implement breadcrumb navigation for deep routes </li> </ul>"},{"location":"frontend/services/","title":"API Services","text":"<p>This document covers the API service layer in the Broadcast Management System frontend, including the Django API client, request/response handling, authentication integration, and error management.</p>"},{"location":"frontend/services/#overview","title":"Overview","text":"<p>The API service layer provides a clean abstraction between the frontend components and the backend Django REST API. It handles authentication, CSRF protection, request formatting, and error management, while providing type-safe interfaces for all API operations.</p>"},{"location":"frontend/services/#architecture","title":"Architecture","text":"<pre><code>graph TD\n    Components[React Components] --&gt; Hooks[Custom Hooks]\n    Hooks --&gt; Query[TanStack Query]\n    Query --&gt; Service[Django API Service]\n    Service --&gt; Auth[Authentication Layer]\n    Service --&gt; CSRF[CSRF Token Handler]\n    Service --&gt; Request[Request Handler]\n    Request --&gt; Backend[Django Backend]\n\n    subgraph \"Error Handling\"\n        Error[Error Handler]\n        Toast[Toast Notifications]\n        Retry[Retry Logic]\n    end\n\n    Service --&gt; Error\n    Error --&gt; Toast\n    Error --&gt; Retry\n\n    style Service fill:#4da6ff\n    style Backend fill:#8fbcbb\n    style Error fill:#ff6b6b</code></pre>"},{"location":"frontend/services/#djangoapiservice-class","title":"DjangoApiService Class","text":"<p>The central API service class that handles all communication with the Django backend.</p>"},{"location":"frontend/services/#core-configuration","title":"Core Configuration","text":"<pre><code>const API_BASE_URL = 'https://app.capparelli.ie/api';\n\nclass DjangoApiService {\n  private async request&lt;T&gt;(\n    endpoint: string, \n    options: RequestInit = {}\n  ): Promise&lt;T&gt; {\n    const url = `${API_BASE_URL}${endpoint}`;\n\n    const defaultHeaders: HeadersInit = {\n      'Content-Type': 'application/json',\n    };\n\n    // Add CSRF token for non-GET requests\n    if (options.method &amp;&amp; options.method !== 'GET') {\n      const token = await getCsrfToken();\n      defaultHeaders['X-CSRFToken'] = token;\n    }\n\n    const config: RequestInit = {\n      credentials: 'include', // Important for session-based auth\n      headers: {\n        ...defaultHeaders,\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    const response = await fetch(url, config);\n\n    if (!response.ok) {\n      const errorData: ApiError = await response.json().catch(() =&gt; ({}));\n      throw new Error(errorData.detail || errorData.message || `HTTP ${response.status}`);\n    }\n\n    return response.json();\n  }\n}\n</code></pre>"},{"location":"frontend/services/#key-features","title":"Key Features","text":"<ul> <li>Session-Based Authentication: Automatic cookie handling for Django sessions</li> <li>CSRF Protection: Automatic CSRF token retrieval and inclusion</li> <li>Type Safety: Full TypeScript integration with defined interfaces</li> <li>Error Handling: Consistent error response parsing and throwing</li> <li>Request Standardization: Unified request configuration and headers</li> </ul>"},{"location":"frontend/services/#authentication-services","title":"Authentication Services","text":""},{"location":"frontend/services/#csrf-token-management","title":"CSRF Token Management","text":"<pre><code>let csrfToken: string | null = null;\n\nconst getCsrfToken = async (): Promise&lt;string&gt; =&gt; {\n  if (csrfToken) return csrfToken;\n\n  const response = await fetch(`${API_BASE_URL}/csrf/`, {\n    credentials: 'include',\n  });\n\n  if (response.ok) {\n    const data = await response.json();\n    csrfToken = data.csrfToken;\n    return csrfToken!;\n  }\n\n  throw new Error('Failed to get CSRF token');\n};\n</code></pre>"},{"location":"frontend/services/#authentication-methods","title":"Authentication Methods","text":"<pre><code>class DjangoApiService {\n  // User login\n  async login(username: string, password: string): Promise&lt;DjangoUser&gt; {\n    return this.request&lt;DjangoUser&gt;('/auth/login/', {\n      method: 'POST',\n      body: JSON.stringify({ username, password }),\n    });\n  }\n\n  // User logout\n  async logout(): Promise&lt;void&gt; {\n    await this.request('/auth/logout/', { method: 'POST' });\n    csrfToken = null; // Clear cached token\n  }\n\n  // Get current user\n  async getCurrentUser(): Promise&lt;DjangoUser&gt; {\n    return this.request&lt;DjangoUser&gt;('/auth/user/');\n  }\n}\n</code></pre> <p>Key Authentication Features: - Session Persistence: Leverages Django session framework - Automatic Token Management: CSRF tokens handled transparently - Secure Logout: Proper session cleanup on logout - User Validation: Current user retrieval for session validation</p>"},{"location":"frontend/services/#user-profile-services","title":"User &amp; Profile Services","text":""},{"location":"frontend/services/#profile-management","title":"Profile Management","text":"<pre><code>// Get all profiles with pagination\nasync getProfiles(): Promise&lt;ApiResponse&lt;Profile&gt;&gt; {\n  return this.request&lt;ApiResponse&lt;Profile&gt;&gt;('/profiles/');\n}\n\n// Get specific profile\nasync getProfile(id: number): Promise&lt;Profile&gt; {\n  return this.request&lt;Profile&gt;(`/profiles/${id}/`);\n}\n\n// Create new profile\nasync createProfile(data: Partial&lt;Profile&gt;): Promise&lt;Profile&gt; {\n  return this.request&lt;Profile&gt;('/profiles/', {\n    method: 'POST',\n    body: JSON.stringify(data),\n  });\n}\n\n// Update existing profile\nasync updateProfile(id: number, data: Partial&lt;Profile&gt;): Promise&lt;Profile&gt; {\n  return this.request&lt;Profile&gt;(`/profiles/${id}/`, {\n    method: 'PATCH',\n    body: JSON.stringify(data),\n  });\n}\n</code></pre> <p>Profile Service Features: - CRUD Operations: Complete Create, Read, Update, Delete functionality - Partial Updates: Support for PATCH operations with partial data - Type Safety: Strongly typed request and response interfaces - Validation: Client-side and server-side validation integration</p>"},{"location":"frontend/services/#configuration-services","title":"Configuration Services","text":""},{"location":"frontend/services/#location-facility-management","title":"Location &amp; Facility Management","text":"<pre><code>// Locations\nasync getLocations(): Promise&lt;ApiResponse&lt;Location&gt;&gt; {\n  return this.request&lt;ApiResponse&lt;Location&gt;&gt;('/locations/');\n}\n\nasync createLocation(data: Partial&lt;Location&gt;): Promise&lt;Location&gt; {\n  return this.request&lt;Location&gt;('/locations/', {\n    method: 'POST',\n    body: JSON.stringify(data),\n  });\n}\n\n// Facilities\nasync getFacilities(): Promise&lt;ApiResponse&lt;Facility&gt;&gt; {\n  return this.request&lt;ApiResponse&lt;Facility&gt;&gt;('/facilities/');\n}\n\nasync createFacility(data: Partial&lt;Facility&gt;): Promise&lt;Facility&gt; {\n  return this.request&lt;Facility&gt;('/facilities/', {\n    method: 'POST',\n    body: JSON.stringify(data),\n  });\n}\n</code></pre>"},{"location":"frontend/services/#shift-management","title":"Shift Management","text":"<pre><code>async getShifts(): Promise&lt;ApiResponse&lt;Shift&gt;&gt; {\n  return this.request&lt;ApiResponse&lt;Shift&gt;&gt;('/shifts/');\n}\n\nasync createShift(data: Partial&lt;Shift&gt;): Promise&lt;Shift&gt; {\n  return this.request&lt;Shift&gt;('/shifts/', {\n    method: 'POST',\n    body: JSON.stringify(data),\n  });\n}\n</code></pre>"},{"location":"frontend/services/#time-management-services","title":"Time Management Services","text":""},{"location":"frontend/services/#time-entry-operations","title":"Time Entry Operations","text":"<pre><code>// Get time entries with optional user filtering\nasync getTimeEntries(userId?: number): Promise&lt;ApiResponse&lt;TimeEntry&gt;&gt; {\n  const params = userId ? `?user=${userId}` : '';\n  return this.request&lt;ApiResponse&lt;TimeEntry&gt;&gt;(`/time-entries/${params}`);\n}\n\n// Create time entry\nasync createTimeEntry(data: Partial&lt;TimeEntry&gt;): Promise&lt;TimeEntry&gt; {\n  return this.request&lt;TimeEntry&gt;('/time-entries/', {\n    method: 'POST',\n    body: JSON.stringify(data),\n  });\n}\n\n// Update time entry\nasync updateTimeEntry(id: number, data: Partial&lt;TimeEntry&gt;): Promise&lt;TimeEntry&gt; {\n  return this.request&lt;TimeEntry&gt;(`/time-entries/${id}/`, {\n    method: 'PATCH',\n    body: JSON.stringify(data),\n  });\n}\n</code></pre>"},{"location":"frontend/services/#time-off-requests","title":"Time Off Requests","text":"<pre><code>// Get time off requests with optional user filtering\nasync getTimeOffRequests(userId?: number): Promise&lt;ApiResponse&lt;TimeOffRequest&gt;&gt; {\n  const params = userId ? `?user=${userId}` : '';\n  return this.request&lt;ApiResponse&lt;TimeOffRequest&gt;&gt;(`/time-off-requests/${params}`);\n}\n\n// Create time off request\nasync createTimeOffRequest(data: Partial&lt;TimeOffRequest&gt;): Promise&lt;TimeOffRequest&gt; {\n  return this.request&lt;TimeOffRequest&gt;('/time-off-requests/', {\n    method: 'POST',\n    body: JSON.stringify(data),\n  });\n}\n\n// Update time off request (approval/rejection)\nasync updateTimeOffRequest(id: number, data: Partial&lt;TimeOffRequest&gt;): Promise&lt;TimeOffRequest&gt; {\n  return this.request&lt;TimeOffRequest&gt;(`/time-off-requests/${id}/`, {\n    method: 'PATCH',\n    body: JSON.stringify(data),\n  });\n}\n</code></pre>"},{"location":"frontend/services/#scheduling-services","title":"Scheduling Services","text":""},{"location":"frontend/services/#event-management","title":"Event Management","text":"<pre><code>// Get scheduled events\nasync getScheduledEvents(): Promise&lt;ApiResponse&lt;ScheduledEvent&gt;&gt; {\n  return this.request&lt;ApiResponse&lt;ScheduledEvent&gt;&gt;('/scheduled-events/');\n}\n\n// Create scheduled event\nasync createScheduledEvent(data: Partial&lt;ScheduledEvent&gt;): Promise&lt;ScheduledEvent&gt; {\n  return this.request&lt;ScheduledEvent&gt;('/scheduled-events/', {\n    method: 'POST',\n    body: JSON.stringify(data),\n  });\n}\n\n// Update scheduled event\nasync updateScheduledEvent(id: number, data: Partial&lt;ScheduledEvent&gt;): Promise&lt;ScheduledEvent&gt; {\n  return this.request&lt;ScheduledEvent&gt;(`/scheduled-events/${id}/`, {\n    method: 'PATCH',\n    body: JSON.stringify(data),\n  });\n}\n</code></pre> <p>Scheduling Features: - Event CRUD: Complete event lifecycle management - Assignment Management: User assignment to events - Status Tracking: Event status updates and tracking - Conflict Detection: Client-side scheduling conflict detection</p>"},{"location":"frontend/services/#ticket-management-services","title":"Ticket Management Services","text":""},{"location":"frontend/services/#incident-ticket-operations","title":"Incident Ticket Operations","text":"<pre><code>// Get incident types for categorization\nasync getIncidentTypes(): Promise&lt;ApiResponse&lt;IncidentType&gt;&gt; {\n  return this.request&lt;ApiResponse&lt;IncidentType&gt;&gt;('/incident-types/');\n}\n\n// Get all incident tickets\nasync getIncidentTickets(): Promise&lt;ApiResponse&lt;IncidentTicket&gt;&gt; {\n  return this.request&lt;ApiResponse&lt;IncidentTicket&gt;&gt;('/incident-tickets/');\n}\n\n// Get specific incident ticket\nasync getIncidentTicket(id: number): Promise&lt;IncidentTicket&gt; {\n  return this.request&lt;IncidentTicket&gt;(`/incident-tickets/${id}/`);\n}\n\n// Create incident ticket\nasync createIncidentTicket(data: Partial&lt;IncidentTicket&gt;): Promise&lt;IncidentTicket&gt; {\n  return this.request&lt;IncidentTicket&gt;('/incident-tickets/', {\n    method: 'POST',\n    body: JSON.stringify(data),\n  });\n}\n\n// Update incident ticket\nasync updateIncidentTicket(id: number, data: Partial&lt;IncidentTicket&gt;): Promise&lt;IncidentTicket&gt; {\n  return this.request&lt;IncidentTicket&gt;(`/incident-tickets/${id}/`, {\n    method: 'PATCH',\n    body: JSON.stringify(data),\n  });\n}\n</code></pre>"},{"location":"frontend/services/#service-ticket-operations","title":"Service Ticket Operations","text":"<pre><code>// Service ticket management (similar pattern to incident tickets)\nasync getServiceTickets(): Promise&lt;ApiResponse&lt;ServiceTicket&gt;&gt; {\n  return this.request&lt;ApiResponse&lt;ServiceTicket&gt;&gt;('/service-tickets/');\n}\n\nasync getServiceTicket(id: number): Promise&lt;ServiceTicket&gt; {\n  return this.request&lt;ServiceTicket&gt;(`/service-tickets/${id}/`);\n}\n\nasync createServiceTicket(data: Partial&lt;ServiceTicket&gt;): Promise&lt;ServiceTicket&gt; {\n  return this.request&lt;ServiceTicket&gt;('/service-tickets/', {\n    method: 'POST',\n    body: JSON.stringify(data),\n  });\n}\n\nasync updateServiceTicket(id: number, data: Partial&lt;ServiceTicket&gt;): Promise&lt;ServiceTicket&gt; {\n  return this.request&lt;ServiceTicket&gt;(`/service-tickets/${id}/`, {\n    method: 'PATCH',\n    body: JSON.stringify(data),\n  });\n}\n</code></pre>"},{"location":"frontend/services/#communication-services","title":"Communication Services","text":""},{"location":"frontend/services/#email-integration","title":"Email Integration","text":"<pre><code>// Send email through Django backend\nasync sendEmail(data: {\n  to: string[];\n  subject: string;\n  message: string;\n  html?: string;\n}): Promise&lt;void&gt; {\n  await this.request('/send-email/', {\n    method: 'POST',\n    body: JSON.stringify(data),\n  });\n}\n</code></pre> <p>Email Features: - Multi-recipient: Support for multiple email recipients - HTML Support: Rich HTML email content - Django Integration: Leverages Django's email framework - Error Handling: Proper error handling for email failures</p>"},{"location":"frontend/services/#error-handling","title":"Error Handling","text":""},{"location":"frontend/services/#error-types","title":"Error Types","text":"<pre><code>export interface ApiError {\n  detail?: string;               // General error message\n  message?: string;              // Alternative message field\n  errors?: Record&lt;string, string[]&gt;; // Field-specific validation errors\n}\n</code></pre>"},{"location":"frontend/services/#error-handling-patterns","title":"Error Handling Patterns","text":"<pre><code>try {\n  const user = await djangoApi.login(username, password);\n  // Handle success\n} catch (error) {\n  if (error instanceof Error) {\n    // Handle API error\n    toast({\n      title: \"Login Failed\",\n      description: error.message,\n      variant: \"destructive\",\n    });\n  }\n}\n</code></pre>"},{"location":"frontend/services/#global-error-handling","title":"Global Error Handling","text":"<pre><code>// In the request method\nif (!response.ok) {\n  const errorData: ApiError = await response.json().catch(() =&gt; ({}));\n\n  // Handle different error types\n  if (response.status === 401) {\n    // Unauthorized - redirect to login\n    window.location.href = '/login';\n  } else if (response.status === 403) {\n    // Forbidden - show access denied\n    throw new Error('Access denied');\n  } else if (response.status &gt;= 500) {\n    // Server error\n    throw new Error('Server error - please try again later');\n  } else {\n    // Client error\n    throw new Error(errorData.detail || errorData.message || `HTTP ${response.status}`);\n  }\n}\n</code></pre>"},{"location":"frontend/services/#requestresponse-patterns","title":"Request/Response Patterns","text":""},{"location":"frontend/services/#pagination-support","title":"Pagination Support","text":"<p>All list endpoints return paginated responses:</p> <pre><code>interface ApiResponse&lt;T&gt; {\n  results?: T[];      // Array of items\n  count?: number;     // Total count\n  next?: string;      // Next page URL\n  previous?: string;  // Previous page URL\n}\n</code></pre>"},{"location":"frontend/services/#query-parameters","title":"Query Parameters","text":"<pre><code>// Example with filtering and pagination\nasync getTimeEntries(filters: {\n  user?: number;\n  date?: string;\n  status?: string;\n  page?: number;\n  page_size?: number;\n}): Promise&lt;ApiResponse&lt;TimeEntry&gt;&gt; {\n  const params = new URLSearchParams();\n\n  Object.entries(filters).forEach(([key, value]) =&gt; {\n    if (value !== undefined) {\n      params.append(key, value.toString());\n    }\n  });\n\n  const queryString = params.toString();\n  const endpoint = `/time-entries/${queryString ? `?${queryString}` : ''}`;\n\n  return this.request&lt;ApiResponse&lt;TimeEntry&gt;&gt;(endpoint);\n}\n</code></pre>"},{"location":"frontend/services/#service-integration-patterns","title":"Service Integration Patterns","text":""},{"location":"frontend/services/#tanstack-query-integration","title":"TanStack Query Integration","text":"<pre><code>// Custom hooks using the service\nexport const useIncidentTickets = () =&gt; {\n  return useQuery({\n    queryKey: ['incident-tickets'],\n    queryFn: () =&gt; djangoApi.getIncidentTickets(),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n};\n\nexport const useCreateIncidentTicket = () =&gt; {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: Partial&lt;IncidentTicket&gt;) =&gt; \n      djangoApi.createIncidentTicket(data),\n    onSuccess: () =&gt; {\n      queryClient.invalidateQueries(['incident-tickets']);\n    },\n  });\n};\n</code></pre>"},{"location":"frontend/services/#context-integration","title":"Context Integration","text":"<pre><code>// In AuthContext\nconst login = async (username: string, password: string): Promise&lt;boolean&gt; =&gt; {\n  try {\n    const loggedInUser = await djangoApi.login(username, password);\n    setUser(loggedInUser);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n</code></pre>"},{"location":"frontend/services/#performance-optimizations","title":"Performance Optimizations","text":""},{"location":"frontend/services/#request-deduplication","title":"Request Deduplication","text":"<p>TanStack Query automatically deduplicates identical requests:</p> <pre><code>// Multiple components calling this will only result in one request\nconst { data } = useQuery({\n  queryKey: ['profiles'],\n  queryFn: () =&gt; djangoApi.getProfiles(),\n});\n</code></pre>"},{"location":"frontend/services/#caching-strategy","title":"Caching Strategy","text":"<ul> <li>Stale-While-Revalidate: Keep stale data while fetching fresh data</li> <li>Background Updates: Automatic background refresh of cached data</li> <li>Selective Invalidation: Invalidate specific queries on mutations</li> </ul>"},{"location":"frontend/services/#request-optimization","title":"Request Optimization","text":"<ul> <li>Parallel Requests: Use Promise.all for independent requests</li> <li>Request Batching: Combine related requests where possible</li> <li>Conditional Requests: Only fetch when needed (enabled flag)</li> </ul>"},{"location":"frontend/services/#testing-strategies","title":"Testing Strategies","text":""},{"location":"frontend/services/#mock-service","title":"Mock Service","text":"<pre><code>// Mock for testing\nexport const mockDjangoApi = {\n  login: jest.fn(),\n  getProfiles: jest.fn(),\n  createProfile: jest.fn(),\n  // ... other methods\n};\n</code></pre>"},{"location":"frontend/services/#service-testing","title":"Service Testing","text":"<pre><code>describe('DjangoApiService', () =&gt; {\n  beforeEach(() =&gt; {\n    fetchMock.resetMocks();\n  });\n\n  test('login success', async () =&gt; {\n    const mockUser = { id: 1, username: 'test' };\n    fetchMock.mockResponseOnce(JSON.stringify(mockUser));\n\n    const result = await djangoApi.login('test', 'password');\n    expect(result).toEqual(mockUser);\n  });\n\n  test('login failure', async () =&gt; {\n    fetchMock.mockResponseOnce('', { status: 401 });\n\n    await expect(djangoApi.login('test', 'wrong')).rejects.toThrow();\n  });\n});\n</code></pre>"},{"location":"frontend/services/#best-practices","title":"Best Practices","text":""},{"location":"frontend/services/#api-design","title":"API Design","text":"<ul> <li>Consistent Interfaces: All endpoints follow similar patterns</li> <li>Type Safety: Full TypeScript integration</li> <li>Error Handling: Consistent error response handling</li> <li>Documentation: Clear method documentation and examples</li> </ul>"},{"location":"frontend/services/#security","title":"Security","text":"<ul> <li>CSRF Protection: Automatic CSRF token handling</li> <li>Session Security: Secure cookie handling</li> <li>Input Validation: Client-side validation before API calls</li> <li>Error Privacy: Don't expose sensitive information in errors</li> </ul>"},{"location":"frontend/services/#performance","title":"Performance","text":"<ul> <li>Request Optimization: Minimize unnecessary requests</li> <li>Caching: Leverage browser and TanStack Query caching</li> <li>Error Recovery: Implement retry logic for transient errors</li> <li>Loading States: Provide clear loading feedback to users</li> </ul>"},{"location":"frontend/services/#future-enhancements","title":"Future Enhancements","text":""},{"location":"frontend/services/#planned-improvements","title":"Planned Improvements","text":"<ul> <li>Request Interceptors: Global request/response transformation</li> <li>Retry Logic: Automatic retry for failed requests</li> <li>Offline Support: Queue requests when offline</li> <li>Real-time Updates: WebSocket integration for live data</li> <li>API Versioning: Support for multiple API versions </li> </ul>"},{"location":"frontend/types/","title":"TypeScript Types","text":"<p>This document provides comprehensive documentation of all TypeScript interfaces and types used in the Broadcast Management System frontend. These types define the data structures that the frontend expects from the backend API.</p>"},{"location":"frontend/types/#overview","title":"Overview","text":"<p>All type definitions are centralized in <code>src/types/django.ts</code> and follow a consistent naming convention that reflects the Django backend models. These types ensure type safety throughout the application and provide clear contracts for API integration.</p>"},{"location":"frontend/types/#core-user-types","title":"Core User Types","text":""},{"location":"frontend/types/#djangouser","title":"DjangoUser","text":"<p>The primary user interface representing authenticated users in the system.</p> <pre><code>export interface DjangoUser {\n  id: number;                    // Unique user identifier\n  username: string;              // Login username\n  email: string;                 // User email address\n  first_name: string;            // User's first name\n  last_name: string;             // User's last name\n  is_staff: boolean;             // Staff privileges flag\n  is_active: boolean;            // Account active status\n  date_joined: string;           // ISO date string of account creation\n  last_login: string | null;     // ISO date string of last login\n}\n</code></pre> <p>Usage: Core user authentication and identification throughout the application.</p>"},{"location":"frontend/types/#profile","title":"Profile","text":"<p>Extended user profile information with business-specific details.</p> <pre><code>export interface Profile {\n  id: number;                    // Profile identifier\n  user: DjangoUser;              // Associated user account\n  full_name: string;             // Display name\n  email: string;                 // Profile email (may differ from user email)\n  phone?: string;                // Phone number (optional)\n  position?: string;             // Job position/title\n  department?: string;           // Department assignment\n  start_date?: string;           // Employment start date\n  status: 'Active' | 'Inactive'; // Employment status\n  created_at: string;            // Profile creation date\n  updated_at: string;            // Last update timestamp\n}\n</code></pre> <p>Usage: Employee management, profile display, and business logic throughout the application.</p>"},{"location":"frontend/types/#location-and-facility-types","title":"Location and Facility Types","text":""},{"location":"frontend/types/#location","title":"Location","text":"<p>Physical locations where broadcast operations occur.</p> <pre><code>export interface Location {\n  id: number;                    // Location identifier\n  name: string;                  // Location name/title\n  description?: string;          // Optional location description\n  created_at: string;            // Creation timestamp\n}\n</code></pre> <p>Usage: Event scheduling, time tracking, and facility management.</p>"},{"location":"frontend/types/#facility","title":"Facility","text":"<p>Specific facilities or areas within locations.</p> <pre><code>export interface Facility {\n  id: number;                    // Facility identifier\n  name: string;                  // Facility name\n  description?: string;          // Facility description\n  location?: Location;           // Associated location\n  status: 'Active' | 'Inactive'; // Facility operational status\n  created_at: string;            // Creation timestamp\n}\n</code></pre> <p>Usage: Resource scheduling and facility management workflows.</p>"},{"location":"frontend/types/#scheduling-types","title":"Scheduling Types","text":""},{"location":"frontend/types/#shift","title":"Shift","text":"<p>Work shift definitions for scheduling and time tracking.</p> <pre><code>export interface Shift {\n  id: number;                    // Shift identifier\n  name: string;                  // Shift name (e.g., \"Morning\", \"Evening\")\n  description?: string;          // Shift description\n  start_time?: string;           // Shift start time (HH:MM format)\n  end_time?: string;             // Shift end time (HH:MM format)\n  created_at: string;            // Creation timestamp\n}\n</code></pre> <p>Usage: Employee scheduling, time tracking, and shift management.</p>"},{"location":"frontend/types/#scheduledevent","title":"ScheduledEvent","text":"<p>Events scheduled in the broadcast calendar.</p> <pre><code>export interface ScheduledEvent {\n  id: number;                    // Event identifier\n  title: string;                 // Event title\n  description?: string;          // Event description\n  event_type?: string;           // Event category\n  start_time: string;            // ISO datetime string\n  end_time: string;              // ISO datetime string\n  location?: Location;           // Event location\n  assigned_users: Profile[];     // Assigned staff members\n  created_by?: Profile;          // Event creator\n  status: 'Scheduled' | 'In Progress' | 'Completed' | 'Cancelled';\n  created_at: string;            // Creation timestamp\n  updated_at: string;            // Last update timestamp\n}\n</code></pre> <p>Usage: Calendar displays, scheduling interfaces, and event management.</p>"},{"location":"frontend/types/#time-tracking-types","title":"Time Tracking Types","text":""},{"location":"frontend/types/#timeentry","title":"TimeEntry","text":"<p>Individual time tracking records for employees.</p> <pre><code>export interface TimeEntry {\n  id: number;                    // Time entry identifier\n  user: Profile;                 // Employee profile\n  date: string;                  // Entry date (YYYY-MM-DD)\n  clock_in?: string;             // Clock-in time (ISO string)\n  clock_out?: string;            // Clock-out time (ISO string)\n  break_start?: string;          // Break start time (ISO string)\n  break_end?: string;            // Break end time (ISO string)\n  total_hours?: number;          // Calculated total hours\n  location?: Location;           // Work location\n  shift?: Shift;                 // Associated shift\n  notes?: string;                // Additional notes\n  status: 'Pending' | 'Approved' | 'Rejected'; // Approval status\n  approved_by?: Profile;         // Approving manager\n  approved_at?: string;          // Approval timestamp\n  created_at: string;            // Creation timestamp\n  updated_at: string;            // Last update timestamp\n}\n</code></pre> <p>Usage: Time tracking interfaces, payroll processing, and manager approval workflows.</p>"},{"location":"frontend/types/#timeoffrequest","title":"TimeOffRequest","text":"<p>Employee time-off requests with approval workflow.</p> <pre><code>export interface TimeOffRequest {\n  id: number;                    // Request identifier\n  user: Profile;                 // Requesting employee\n  request_type: string;          // Type of time off (vacation, sick, etc.)\n  start_date: string;            // Start date (YYYY-MM-DD)\n  end_date: string;              // End date (YYYY-MM-DD)\n  reason?: string;               // Request reason/notes\n  status: 'Pending' | 'Approved' | 'Rejected'; // Request status\n  approved_by?: Profile;         // Approving manager\n  approved_at?: string;          // Approval timestamp\n  created_at: string;            // Creation timestamp\n  updated_at: string;            // Last update timestamp\n}\n</code></pre> <p>Usage: Time-off management, scheduling conflict detection, and approval workflows.</p>"},{"location":"frontend/types/#ticket-management-types","title":"Ticket Management Types","text":""},{"location":"frontend/types/#incidenttype","title":"IncidentType","text":"<p>Categorization for incident tickets.</p> <pre><code>export interface IncidentType {\n  id: number;                    // Type identifier\n  name: string;                  // Type name\n  description?: string;          // Type description\n  severity_level: number;        // Severity level (1-5, 1 being highest)\n  created_at: string;            // Creation timestamp\n}\n</code></pre> <p>Usage: Incident classification and reporting workflows.</p>"},{"location":"frontend/types/#incidentticket","title":"IncidentTicket","text":"<p>Incident reports and tracking.</p> <pre><code>export interface IncidentTicket {\n  id: number;                    // Incident identifier\n  title: string;                 // Incident title\n  description?: string;          // Detailed description\n  status: 'Open' | 'In Progress' | 'Resolved' | 'Closed';\n  priority: 'Low' | 'Medium' | 'High' | 'Critical';\n  incident_type?: IncidentType;  // Incident classification\n  reporter?: Profile;            // Person reporting the incident\n  assignee?: Profile;            // Assigned responder\n  facility?: Facility;           // Affected facility\n  created_at: string;            // Report timestamp\n  updated_at: string;            // Last update timestamp\n  resolved_at?: string;          // Resolution timestamp\n}\n</code></pre> <p>Usage: Incident reporting, tracking, and resolution workflows.</p>"},{"location":"frontend/types/#serviceticket","title":"ServiceTicket","text":"<p>Service requests and change management.</p> <pre><code>export interface ServiceTicket {\n  id: number;                    // Service ticket identifier\n  title: string;                 // Request title\n  description?: string;          // Request description\n  service_type?: string;         // Type of service requested\n  status: 'Open' | 'In Progress' | 'Completed' | 'Cancelled';\n  priority: 'Low' | 'Medium' | 'High' | 'Critical';\n  requested_by?: Profile;        // Person making the request\n  assignee?: Profile;            // Assigned service provider\n  due_date?: string;             // Requested completion date\n  created_at: string;            // Request timestamp\n  updated_at: string;            // Last update timestamp\n  completed_at?: string;         // Completion timestamp\n}\n</code></pre> <p>Usage: Service request management and change control processes.</p>"},{"location":"frontend/types/#api-response-types","title":"API Response Types","text":""},{"location":"frontend/types/#apiresponse","title":"ApiResponse <p>Generic response wrapper for paginated API responses.</p> <pre><code>export interface ApiResponse&lt;T&gt; {\n  results?: T[];                 // Array of result objects\n  count?: number;                // Total number of items\n  next?: string;                 // URL for next page\n  previous?: string;             // URL for previous page\n  data?: T;                      // Single result object\n}\n</code></pre> <p>Usage: Standardized API response handling with pagination support.</p> <p>Example Usage: <pre><code>// List endpoint response\nconst response: ApiResponse&lt;Profile&gt; = {\n  results: [...profiles],\n  count: 150,\n  next: \"https://api.example.com/profiles/?page=2\",\n  previous: null\n};\n\n// Detail endpoint response\nconst response: ApiResponse&lt;Profile&gt; = {\n  data: profile\n};\n</code></pre></p>","text":""},{"location":"frontend/types/#apierror","title":"ApiError <p>Standardized error response structure.</p> <pre><code>export interface ApiError {\n  detail?: string;               // General error message\n  message?: string;              // Alternative message field\n  errors?: Record&lt;string, string[]&gt;; // Field-specific validation errors\n}\n</code></pre> <p>Usage: Consistent error handling across all API interactions.</p> <p>Example Usage: <pre><code>// General error\nconst error: ApiError = {\n  detail: \"Authentication required\"\n};\n\n// Validation errors\nconst error: ApiError = {\n  errors: {\n    email: [\"This field is required\"],\n    password: [\"Password must be at least 8 characters\"]\n  }\n};\n</code></pre></p>","text":""},{"location":"frontend/types/#type-usage-patterns","title":"Type Usage Patterns","text":""},{"location":"frontend/types/#form-types","title":"Form Types <p>Types are used extensively with React Hook Form for type-safe form handling:</p> <pre><code>import { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\n\n// Zod schema based on TypeScript interface\nconst timeEntrySchema = z.object({\n  date: z.string(),\n  clock_in: z.string().optional(),\n  clock_out: z.string().optional(),\n  notes: z.string().optional(),\n});\n\ntype TimeEntryFormData = z.infer&lt;typeof timeEntrySchema&gt;;\n\n// Type-safe form usage\nconst form = useForm&lt;TimeEntryFormData&gt;({\n  resolver: zodResolver(timeEntrySchema)\n});\n</code></pre>","text":""},{"location":"frontend/types/#api-service-types","title":"API Service Types <p>Types provide contracts for API service methods:</p> <pre><code>class DjangoApiService {\n  async getIncidentTickets(): Promise&lt;ApiResponse&lt;IncidentTicket&gt;&gt; {\n    return this.request&lt;ApiResponse&lt;IncidentTicket&gt;&gt;('/incident-tickets/');\n  }\n\n  async createTimeEntry(data: Partial&lt;TimeEntry&gt;): Promise&lt;TimeEntry&gt; {\n    return this.request&lt;TimeEntry&gt;('/time-entries/', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n}\n</code></pre>","text":""},{"location":"frontend/types/#query-types","title":"Query Types <p>Types integrate with TanStack Query for type-safe data fetching:</p> <pre><code>const useProfiles = () =&gt; {\n  return useQuery&lt;ApiResponse&lt;Profile&gt;, ApiError&gt;({\n    queryKey: ['profiles'],\n    queryFn: () =&gt; djangoApi.getProfiles(),\n  });\n};\n</code></pre>","text":""},{"location":"frontend/types/#type-safety-benefits","title":"Type Safety Benefits","text":""},{"location":"frontend/types/#compile-time-validation","title":"Compile-Time Validation <p>TypeScript ensures type correctness during development:</p> <pre><code>// \u2705 Type-safe property access\nconst userName = user.username;\n\n// \u274c Compile error for typos\nconst userName = user.usernmae; // Property 'usernmae' does not exist\n\n// \u2705 Type-safe function calls\nawait djangoApi.createTimeEntry({ date: '2023-07-15' });\n\n// \u274c Compile error for wrong types\nawait djangoApi.createTimeEntry({ date: 123 }); // Type 'number' is not assignable\n</code></pre>","text":""},{"location":"frontend/types/#intellisense-support","title":"IntelliSense Support <p>IDE auto-completion and documentation:</p> <ul> <li>Property suggestions</li> <li>Method signature hints</li> <li>Inline documentation</li> <li>Refactoring support</li> </ul>","text":""},{"location":"frontend/types/#runtime-safety","title":"Runtime Safety <p>Combined with Zod validation for runtime type checking:</p> <pre><code>const profileSchema = z.object({\n  id: z.number(),\n  full_name: z.string(),\n  email: z.string().email(),\n  status: z.enum(['Active', 'Inactive']),\n});\n\n// Runtime validation\nconst validatedProfile = profileSchema.parse(apiResponse);\n</code></pre>","text":""},{"location":"frontend/types/#future-type-considerations","title":"Future Type Considerations","text":""},{"location":"frontend/types/#backend-alignment","title":"Backend Alignment <p>Types are designed to align with planned Django backend models:</p> <ul> <li>Field names match Django model conventions</li> <li>Optional fields reflect database nullable fields</li> <li>Enum values match Django choices</li> <li>Relationship structures follow Django foreign key patterns</li> </ul>","text":""},{"location":"frontend/types/#extensibility","title":"Extensibility <p>Type definitions support future enhancements:</p> <ul> <li>Optional fields for backward compatibility</li> <li>Union types for status values</li> <li>Generic types for reusable patterns</li> <li>Modular type organization</li> </ul>","text":""},{"location":"frontend/types/#validation-integration","title":"Validation Integration <p>Types work seamlessly with validation libraries:</p> <ul> <li>Zod schemas for runtime validation</li> <li>React Hook Form integration</li> <li>Custom validation rules</li> <li>Error message localization support </li> </ul>","text":""},{"location":"frontend/components/overview/","title":"Component Overview","text":"<p>This document provides a comprehensive analysis of all React components in the Broadcast Management System frontend application. Components are organized by category and analyzed for their functionality, dependencies, and integration patterns.</p>"},{"location":"frontend/components/overview/#component-categories","title":"Component Categories","text":""},{"location":"frontend/components/overview/#1-layout-components","title":"1. Layout Components","text":""},{"location":"frontend/components/overview/#2-page-components","title":"2. Page Components","text":""},{"location":"frontend/components/overview/#3-form-components","title":"3. Form Components","text":""},{"location":"frontend/components/overview/#4-data-display-components","title":"4. Data Display Components","text":""},{"location":"frontend/components/overview/#5-ui-components","title":"5. UI Components","text":""},{"location":"frontend/components/overview/#6-utility-components","title":"6. Utility Components","text":""},{"location":"frontend/components/overview/#1-layout-components_1","title":"1. Layout Components","text":""},{"location":"frontend/components/overview/#layouttsx","title":"Layout.tsx","text":"<p>Purpose: Main application layout wrapper providing consistent structure across all pages.</p> <p>Key Features: - Responsive sidebar layout with header - User authentication display - Logout functionality - Notification icon placeholder - Main content area wrapper</p> <p>Dependencies:  - <code>@/components/ui/sidebar</code> - Sidebar components - <code>@/contexts/AuthContext</code> - Authentication state - <code>Sidebar.tsx</code> - Navigation sidebar</p> <p>Props Interface: <pre><code>interface LayoutProps {\n  children: React.ReactNode;\n}\n</code></pre></p> <p>Usage Pattern: <pre><code>&lt;Layout&gt;\n  &lt;Dashboard /&gt;\n&lt;/Layout&gt;\n</code></pre></p>"},{"location":"frontend/components/overview/#sidebartsx-appsidebar","title":"Sidebar.tsx (AppSidebar)","text":"<p>Purpose: Navigation sidebar with role-based menu items and collapsible functionality.</p> <p>Key Features: - Collapsible navigation menu - Role-based menu item visibility - Active route highlighting - Grouped menu sections (Main, Engineering, Management, etc.) - Responsive design</p> <p>Menu Structure: - Main: Dashboard, Time Keeping, Schedule, Reports - Operations: Incident Report, Change Request, System Check - Engineering: Engineering Dashboard, Service Tickets, Incident Tickets - Management: Management Dashboard, Analytics, Employee Management - Settings: Application settings</p> <p>Dependencies: - <code>@/components/ui/sidebar</code> - Sidebar primitives - <code>react-router-dom</code> - Navigation and active route detection - <code>lucide-react</code> - Icons</p>"},{"location":"frontend/components/overview/#protectedroutetsx","title":"ProtectedRoute.tsx","text":"<p>Purpose: Authentication wrapper for protecting routes from unauthorized access.</p> <p>Key Features: - Authentication state checking - Automatic redirect to login for unauthenticated users - Loading state handling</p> <p>Usage: <pre><code>&lt;ProtectedRoute&gt;\n  &lt;Layout&gt;\n    &lt;Dashboard /&gt;\n  &lt;/Layout&gt;\n&lt;/ProtectedRoute&gt;\n</code></pre></p>"},{"location":"frontend/components/overview/#2-page-components_1","title":"2. Page Components","text":""},{"location":"frontend/components/overview/#dashboardtsx","title":"Dashboard.tsx","text":"<p>Purpose: Main dashboard providing overview of broadcast operations and quick access to key functions.</p> <p>Key Features: - Week view of scheduled events - Staffing status indicators - Quick action buttons - Stats cards (Total Events, Active Staff, Pending Approvals) - Recent activity feed - Responsive grid layout</p> <p>Data Structures: <pre><code>interface Event {\n  name: string;\n  staffed: boolean;\n}\n\ninterface DaySchedule {\n  date: string;\n  day: string;\n  isToday: boolean;\n  events: Event[];\n}\n</code></pre></p>"},{"location":"frontend/components/overview/#timekeepingtsx","title":"TimeKeeping.tsx","text":"<p>Purpose: Time tracking interface for employee clock-in/out and timesheet management.</p> <p>Key Features: - Digital clock display - Clock in/out functionality - Break time tracking - Current week timesheet view - Time entry validation - Manager approval workflow</p> <p>Component Dependencies: - <code>ClockEntryForm.tsx</code> - <code>MonthlyTimeCalendar.tsx</code> - <code>TimeClockApproval.tsx</code></p>"},{"location":"frontend/components/overview/#schedulingtsx","title":"Scheduling.tsx","text":"<p>Purpose: Event and shift scheduling interface with calendar view and conflict detection.</p> <p>Key Features: - Calendar-based event scheduling - Drag-and-drop functionality - Conflict detection and resolution - Recurring event support - Staff assignment interface - Schedule templates</p> <p>Dependencies: - Date manipulation utilities - Calendar components - Form validation</p>"},{"location":"frontend/components/overview/#employeemanagementtsx","title":"EmployeeManagement.tsx","text":"<p>Purpose: User and profile management interface for administrators.</p> <p>Key Features: - Employee list with search and filtering - Add/edit employee functionality - Role assignment - Department management - Profile status tracking</p> <p>Related Components: - <code>AddEmployeeDialog.tsx</code> - <code>EmployeeDetail.tsx</code></p>"},{"location":"frontend/components/overview/#reportstsx","title":"Reports.tsx","text":"<p>Purpose: Data visualization and reporting interface with export capabilities.</p> <p>Key Features: - Multiple report types (Time, Scheduling, Incidents) - Date range selection - Export functionality (PDF, Excel, CSV) - Chart and graph displays - Filter and search capabilities</p>"},{"location":"frontend/components/overview/#settingstsx","title":"Settings.tsx","text":"<p>Purpose: System configuration interface for administrators.</p> <p>Key Features: - Location and facility management - Shift configuration - Incident type setup - User role management - System preferences - Backup and maintenance options</p> <p>Related Components: - <code>ManagementSettings.tsx</code> - Form components for various settings</p>"},{"location":"frontend/components/overview/#3-form-components_1","title":"3. Form Components","text":""},{"location":"frontend/components/overview/#clockentryformtsx","title":"ClockEntryForm.tsx","text":"<p>Purpose: Time clock interface for employee check-in/out with validation.</p> <p>Key Features: - Real-time clock display - Clock in/out buttons with validation - Break time tracking - Location selection - Notes and comments - Automatic time calculations</p> <p>Form Validation: - Prevents double clock-in - Validates break times - Enforces location selection - Handles edge cases (overnight shifts)</p>"},{"location":"frontend/components/overview/#enhancedclockentryformtsx","title":"EnhancedClockEntryForm.tsx","text":"<p>Purpose: Advanced time entry form with additional features and validation.</p> <p>Key Features: - Enhanced validation rules - Overtime detection - Multi-location support - Advanced break tracking - Historical time entry editing</p>"},{"location":"frontend/components/overview/#timeoffrequestformtsx","title":"TimeOffRequestForm.tsx","text":"<p>Purpose: Time-off request submission form with approval workflow.</p> <p>Key Features: - Date range selection - Request type categorization - Reason/notes input - Manager assignment - Status tracking - Conflict checking with scheduled events</p> <p>Form Fields: <pre><code>interface TimeOffRequest {\n  startDate: Date;\n  endDate: Date;\n  requestType: 'vacation' | 'sick' | 'personal' | 'other';\n  reason: string;\n  manager?: string;\n}\n</code></pre></p>"},{"location":"frontend/components/overview/#addemployeedialogtsx","title":"AddEmployeeDialog.tsx","text":"<p>Purpose: Modal dialog for adding new employees to the system.</p> <p>Key Features: - Multi-step form wizard - Employee information validation - Role and department assignment - Profile image upload - Duplicate detection</p>"},{"location":"frontend/components/overview/#4-data-display-components_1","title":"4. Data Display Components","text":""},{"location":"frontend/components/overview/#ticketdetailtsx","title":"TicketDetail.tsx","text":"<p>Purpose: Comprehensive ticket information display with status tracking and actions.</p> <p>Key Features: - Detailed ticket information display - Status timeline and history - Comment and update tracking - File attachment support - Action buttons (assign, update, close) - Related ticket suggestions</p> <p>Supported Ticket Types: - Incident tickets - Service requests - Change requests</p>"},{"location":"frontend/components/overview/#monthlytimecalendartsx","title":"MonthlyTimeCalendar.tsx","text":"<p>Purpose: Calendar view for time entries with visual status indicators.</p> <p>Key Features: - Monthly calendar layout - Time entry status visualization - Daily hour totals - Color-coded status indicators - Navigation between months - Click-to-edit functionality</p> <p>Status Indicators: - \u2705 Approved entries - \u23f3 Pending approval - \u274c Rejected entries - \u26a0\ufe0f Missing entries</p>"},{"location":"frontend/components/overview/#timeclockapprovaltsx","title":"TimeClockApproval.tsx","text":"<p>Purpose: Manager interface for reviewing and approving time entries.</p> <p>Key Features: - Bulk approval functionality - Individual time entry review - Rejection with comments - Filter and search capabilities - Department-based filtering - Export functionality</p>"},{"location":"frontend/components/overview/#ticketreviewtsx","title":"TicketReview.tsx","text":"<p>Purpose: Ticket review and approval interface for managers.</p> <p>Key Features: - Ticket queue management - Priority-based sorting - Bulk operations - Comment and status updates - Assignment management - SLA tracking</p>"},{"location":"frontend/components/overview/#5-ui-components-shadcnui","title":"5. UI Components (shadcn/ui)","text":""},{"location":"frontend/components/overview/#core-ui-components","title":"Core UI Components","text":"<p>The application uses shadcn/ui components for consistent design:</p>"},{"location":"frontend/components/overview/#button-components","title":"Button Components","text":"<ul> <li>Button: Primary action buttons with variants</li> <li>Toggle: Binary state toggles</li> <li>Switch: On/off switches</li> </ul>"},{"location":"frontend/components/overview/#input-components","title":"Input Components","text":"<ul> <li>Input: Text input fields</li> <li>Textarea: Multi-line text input</li> <li>Select: Dropdown selection</li> <li>Checkbox: Boolean input</li> <li>RadioGroup: Single selection from options</li> </ul>"},{"location":"frontend/components/overview/#layout-components","title":"Layout Components","text":"<ul> <li>Card: Content containers with header/footer</li> <li>Separator: Visual dividers</li> <li>ScrollArea: Scrollable content areas</li> <li>Tabs: Tabbed content organization</li> </ul>"},{"location":"frontend/components/overview/#overlay-components","title":"Overlay Components","text":"<ul> <li>Dialog: Modal dialogs</li> <li>Sheet: Slide-over panels</li> <li>Popover: Contextual popups</li> <li>Tooltip: Hover information</li> <li>AlertDialog: Confirmation dialogs</li> </ul>"},{"location":"frontend/components/overview/#data-display","title":"Data Display","text":"<ul> <li>Table: Data tables with sorting/filtering</li> <li>Badge: Status and category indicators</li> <li>Avatar: User profile images</li> <li>Progress: Progress indicators</li> </ul>"},{"location":"frontend/components/overview/#navigation","title":"Navigation","text":"<ul> <li>Sidebar: Navigation sidebar components</li> <li>Breadcrumb: Navigation breadcrumbs</li> <li>Pagination: Page navigation</li> </ul>"},{"location":"frontend/components/overview/#custom-ui-extensions","title":"Custom UI Extensions","text":"<p>The application extends base UI components with domain-specific functionality:</p>"},{"location":"frontend/components/overview/#enhanced-components","title":"Enhanced Components","text":"<ul> <li>DataTable: Tables with advanced filtering, sorting, and pagination</li> <li>DatePicker: Calendar-based date selection</li> <li>TimeInput: Time selection components</li> <li>StatusBadge: Custom status indicators</li> <li>UserAvatar: User profile display</li> </ul>"},{"location":"frontend/components/overview/#6-utility-components_1","title":"6. Utility Components","text":""},{"location":"frontend/components/overview/#component-utilities","title":"Component Utilities","text":"<p>Several utility components provide cross-cutting functionality:</p>"},{"location":"frontend/components/overview/#error-handling","title":"Error Handling","text":"<ul> <li>ErrorBoundary: React error boundary for component errors</li> <li>ErrorDisplay: User-friendly error messages</li> <li>LoadingSpinner: Loading state indicators</li> </ul>"},{"location":"frontend/components/overview/#data-management","title":"Data Management","text":"<ul> <li>DataProvider: Context-based data management</li> <li>QueryWrapper: TanStack Query integration</li> <li>FormProvider: Form state management</li> </ul>"},{"location":"frontend/components/overview/#component-interaction-patterns","title":"Component Interaction Patterns","text":""},{"location":"frontend/components/overview/#1-page-component-relationship","title":"1. Page-Component Relationship","text":"<pre><code>graph TD\n    Page[Page Component] --&gt; Layout[Layout Wrapper]\n    Page --&gt; Forms[Form Components]\n    Page --&gt; Display[Display Components]\n    Page --&gt; UI[UI Components]\n\n    Forms --&gt; Validation[Form Validation]\n    Forms --&gt; API[API Calls]\n\n    Display --&gt; Data[Data Fetching]\n    Display --&gt; Formatting[Data Formatting]\n\n    UI --&gt; Events[Event Handling]\n    UI --&gt; State[State Management]</code></pre>"},{"location":"frontend/components/overview/#2-state-flow","title":"2. State Flow","text":"<pre><code>graph LR\n    User[User Action] --&gt; Component[Component]\n    Component --&gt; Context[Context/State]\n    Component --&gt; API[API Service]\n    API --&gt; Server[Backend]\n    Server --&gt; API\n    API --&gt; Query[TanStack Query]\n    Query --&gt; Component\n    Context --&gt; Component</code></pre>"},{"location":"frontend/components/overview/#3-form-workflow","title":"3. Form Workflow","text":"<pre><code>graph TD\n    Form[Form Component] --&gt; Validation[Client Validation]\n    Validation --&gt; Submit[Form Submission]\n    Submit --&gt; API[API Call]\n    API --&gt; Success[Success Handler]\n    API --&gt; Error[Error Handler]\n    Success --&gt; Redirect[Page Redirect]\n    Success --&gt; Toast[Success Message]\n    Error --&gt; Display[Error Display]</code></pre>"},{"location":"frontend/components/overview/#component-dependencies","title":"Component Dependencies","text":""},{"location":"frontend/components/overview/#external-dependencies","title":"External Dependencies","text":"<ul> <li>React 18: Core component framework</li> <li>React Router: Navigation and routing</li> <li>React Hook Form: Form state management</li> <li>TanStack Query: Data fetching and caching</li> <li>Zod: Form validation</li> <li>date-fns: Date manipulation</li> <li>Lucide React: Icon library</li> </ul>"},{"location":"frontend/components/overview/#internal-dependencies","title":"Internal Dependencies","text":"<ul> <li>UI Components: shadcn/ui component library</li> <li>Contexts: AuthContext, SettingsContext</li> <li>Services: API service layer</li> <li>Types: TypeScript type definitions</li> <li>Utils: Utility functions and helpers</li> </ul>"},{"location":"frontend/components/overview/#performance-considerations","title":"Performance Considerations","text":""},{"location":"frontend/components/overview/#optimization-strategies","title":"Optimization Strategies","text":"<ol> <li>Lazy Loading: Route-based code splitting</li> <li>Memoization: React.memo for expensive renders</li> <li>Virtual Scrolling: Large data set handling</li> <li>Query Optimization: Intelligent caching with TanStack Query</li> <li>Bundle Splitting: Webpack code splitting</li> </ol>"},{"location":"frontend/components/overview/#component-size-analysis","title":"Component Size Analysis","text":"<ul> <li>Large Components (&gt;500 lines): Settings.tsx, EmployeeDetail.tsx, TicketDetail.tsx</li> <li>Medium Components (200-500 lines): Dashboard.tsx, TimeKeeping.tsx, Scheduling.tsx</li> <li>Small Components (&lt;200 lines): Form components, UI components</li> </ul>"},{"location":"frontend/components/overview/#testing-strategy","title":"Testing Strategy","text":""},{"location":"frontend/components/overview/#component-testing","title":"Component Testing","text":"<ul> <li>Unit Tests: Individual component functionality</li> <li>Integration Tests: Component interaction testing</li> <li>Accessibility Tests: Screen reader and keyboard navigation</li> <li>Visual Tests: UI consistency and responsiveness</li> </ul>"},{"location":"frontend/components/overview/#testing-tools","title":"Testing Tools","text":"<ul> <li>React Testing Library: Component behavior testing</li> <li>Jest: Test runner and assertions</li> <li>MSW: API mocking for tests</li> <li>Storybook: Component documentation and testing</li> </ul>"},{"location":"frontend/components/overview/#future-enhancements","title":"Future Enhancements","text":""},{"location":"frontend/components/overview/#planned-improvements","title":"Planned Improvements","text":"<ol> <li>Component Library: Extract reusable components</li> <li>Performance: Virtualization for large datasets</li> <li>Accessibility: Enhanced ARIA support</li> <li>Mobile: Progressive Web App features</li> <li>Offline: Service worker integration </li> </ol>"},{"location":"getting-started/development-setup/","title":"Development Setup","text":"<p>This guide will help you set up the development environment for the Broadcast Management System.</p>"},{"location":"getting-started/development-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js 18 or higher</li> <li>npm or yarn package manager</li> <li>Git</li> <li>Python 3.11+ (for documentation)</li> <li>Docker (for backend development)</li> </ul>"},{"location":"getting-started/development-setup/#frontend-development-setup","title":"Frontend Development Setup","text":""},{"location":"getting-started/development-setup/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/your-org/broadcast.git\ncd broadcast\n</code></pre>"},{"location":"getting-started/development-setup/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code># Using npm\nnpm install\n\n# Using yarn\nyarn install\n</code></pre>"},{"location":"getting-started/development-setup/#3-start-development-server","title":"3. Start Development Server","text":"<pre><code># Using npm\nnpm run dev\n\n# Using yarn\nyarn dev\n</code></pre> <p>The application will be available at <code>http://localhost:5173</code>.</p>"},{"location":"getting-started/development-setup/#4-available-scripts","title":"4. Available Scripts","text":"<ul> <li><code>npm run dev</code> - Start development server with hot reload</li> <li><code>npm run build</code> - Build for production</li> <li><code>npm run preview</code> - Preview production build locally</li> <li><code>npm run lint</code> - Run ESLint</li> <li><code>npm run type-check</code> - Run TypeScript type checking</li> </ul>"},{"location":"getting-started/development-setup/#documentation-development","title":"Documentation Development","text":""},{"location":"getting-started/development-setup/#1-install-mkdocs-dependencies","title":"1. Install MkDocs Dependencies","text":"<pre><code>pip install -r requirements-docs.txt\n</code></pre>"},{"location":"getting-started/development-setup/#2-serve-documentation-locally","title":"2. Serve Documentation Locally","text":"<pre><code>mkdocs serve\n</code></pre> <p>The documentation will be available at <code>http://localhost:8000</code>.</p>"},{"location":"getting-started/development-setup/#3-build-documentation","title":"3. Build Documentation","text":"<pre><code>mkdocs build\n</code></pre>"},{"location":"getting-started/development-setup/#4-documentation-structure","title":"4. Documentation Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.md                    # Main documentation page\n\u251c\u2500\u2500 getting-started/            # Setup and installation guides\n\u251c\u2500\u2500 frontend/                   # Frontend documentation\n\u2502   \u251c\u2500\u2500 architecture.md\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 pages/\n\u2502   \u2514\u2500\u2500 types.md\n\u251c\u2500\u2500 backend/                    # Backend documentation\n\u251c\u2500\u2500 implementation/             # Implementation plan\n\u251c\u2500\u2500 api/                        # API reference\n\u2514\u2500\u2500 development/               # Development guides\n</code></pre>"},{"location":"getting-started/development-setup/#backend-development-setup-future","title":"Backend Development Setup (Future)","text":"<p>When the backend is implemented, you'll be able to set up the full development environment:</p>"},{"location":"getting-started/development-setup/#1-start-backend-services","title":"1. Start Backend Services","text":"<pre><code># Start all services with Docker Compose\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f\n</code></pre>"},{"location":"getting-started/development-setup/#2-run-database-migrations","title":"2. Run Database Migrations","text":"<pre><code>docker-compose exec web python manage.py migrate\n</code></pre>"},{"location":"getting-started/development-setup/#3-create-superuser","title":"3. Create Superuser","text":"<pre><code>docker-compose exec web python manage.py createsuperuser\n</code></pre>"},{"location":"getting-started/development-setup/#4-access-services","title":"4. Access Services","text":"<ul> <li>Frontend: <code>http://localhost:5173</code></li> <li>Backend API: <code>http://localhost:8000</code></li> <li>Admin Interface: <code>http://localhost:8000/admin</code></li> <li>Documentation: <code>http://localhost:8001</code></li> </ul>"},{"location":"getting-started/development-setup/#development-workflow","title":"Development Workflow","text":""},{"location":"getting-started/development-setup/#1-feature-development","title":"1. Feature Development","text":"<ol> <li>Create a feature branch from <code>main</code></li> <li>Make your changes</li> <li>Test locally</li> <li>Submit a pull request</li> </ol>"},{"location":"getting-started/development-setup/#2-documentation-updates","title":"2. Documentation Updates","text":"<ol> <li>Edit documentation files in the <code>docs/</code> directory</li> <li>Test locally with <code>mkdocs serve</code></li> <li>Documentation will auto-deploy on merge to main</li> </ol>"},{"location":"getting-started/development-setup/#3-code-quality","title":"3. Code Quality","text":"<p>The project enforces code quality through:</p> <ul> <li>TypeScript: Strict type checking</li> <li>ESLint: Code linting and formatting</li> <li>Prettier: Code formatting</li> <li>Husky: Pre-commit hooks</li> </ul>"},{"location":"getting-started/development-setup/#environment-configuration","title":"Environment Configuration","text":""},{"location":"getting-started/development-setup/#frontend-environment-variables","title":"Frontend Environment Variables","text":"<p>Create a <code>.env.local</code> file in the project root:</p> <pre><code># API Configuration\nVITE_API_BASE_URL=http://localhost:8000/api\n\n# Feature Flags\nVITE_ENABLE_DEBUG=true\nVITE_ENABLE_ANALYTICS=false\n</code></pre>"},{"location":"getting-started/development-setup/#backend-environment-variables-future","title":"Backend Environment Variables (Future)","text":"<p>When setting up the backend:</p> <pre><code># Database\nDATABASE_URL=postgresql://user:password@localhost:5432/broadcast\nREDIS_URL=redis://localhost:6379/0\n\n# Django\nSECRET_KEY=your-secret-key\nDEBUG=True\nALLOWED_HOSTS=localhost,127.0.0.1\n\n# Email (optional)\nEMAIL_HOST=smtp.gmail.com\nEMAIL_PORT=587\nEMAIL_USE_TLS=True\n</code></pre>"},{"location":"getting-started/development-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/development-setup/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/development-setup/#port-already-in-use","title":"Port Already in Use","text":"<pre><code># Find process using port 5173\nlsof -i :5173\n\n# Kill the process\nkill -9 &lt;PID&gt;\n</code></pre>"},{"location":"getting-started/development-setup/#node-modules-issues","title":"Node Modules Issues","text":"<pre><code># Clear npm cache\nnpm cache clean --force\n\n# Remove node_modules and reinstall\nrm -rf node_modules package-lock.json\nnpm install\n</code></pre>"},{"location":"getting-started/development-setup/#typescript-errors","title":"TypeScript Errors","text":"<pre><code># Clear TypeScript cache\nnpx tsc --build --clean\n\n# Restart TypeScript server in VS Code\nCtrl+Shift+P &gt; \"TypeScript: Restart TS Server\"\n</code></pre>"},{"location":"getting-started/development-setup/#getting-help","title":"Getting Help","text":"<ul> <li>Check the FAQ</li> <li>Review existing GitHub Issues</li> <li>Check the troubleshooting guide</li> <li>Submit a new issue if needed</li> </ul>"},{"location":"getting-started/development-setup/#ide-setup","title":"IDE Setup","text":""},{"location":"getting-started/development-setup/#vs-code-recommended","title":"VS Code (Recommended)","text":"<p>Install these extensions:</p> <ul> <li>TypeScript and JavaScript Language Features</li> <li>ESLint</li> <li>Prettier</li> <li>Tailwind CSS IntelliSense</li> <li>Auto Rename Tag</li> <li>GitLens</li> </ul>"},{"location":"getting-started/development-setup/#settings","title":"Settings","text":"<p>Add to your VS Code settings:</p> <pre><code>{\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n  \"editor.formatOnSave\": true,\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n  },\n  \"typescript.preferences.importModuleSpecifier\": \"relative\"\n}\n</code></pre>"},{"location":"getting-started/development-setup/#next-steps","title":"Next Steps","text":"<ol> <li>Frontend Architecture - Understand the application structure</li> <li>Component Overview - Learn about the component system</li> <li>Contributing Guide - How to contribute to the project </li> </ol>"},{"location":"implementation/timeline/","title":"Implementation Timeline","text":""},{"location":"implementation/timeline/#overview","title":"Overview","text":"<p>This document outlines the timeline for implementing the Broadcast Management System backend. The implementation is divided into phases with specific milestones and deliverables.</p>"},{"location":"implementation/timeline/#timeline-summary","title":"Timeline Summary","text":"Phase Duration Main Focus Phase 1 1-2 weeks Docker Infrastructure Setup Phase 2 3-4 weeks Django Backend Implementation Phase 3 2-3 weeks Integration and Testing Phase 4 1-2 weeks Deployment and Monitoring Total 7-11 weeks Full Implementation"},{"location":"implementation/timeline/#detailed-timeline","title":"Detailed Timeline","text":""},{"location":"implementation/timeline/#phase-1-docker-infrastructure-setup-weeks-1-2","title":"Phase 1: Docker Infrastructure Setup (Weeks 1-2)","text":""},{"location":"implementation/timeline/#week-1-docker-configuration","title":"Week 1: Docker Configuration","text":"<ul> <li>Day 1-2: Set up Docker configuration files (Dockerfile, docker-compose.yml)</li> <li>Day 3-4: Configure PostgreSQL database container</li> <li>Day 5: Configure Redis container</li> </ul>"},{"location":"implementation/timeline/#week-2-environment-configuration","title":"Week 2: Environment Configuration","text":"<ul> <li>Day 1-2: Set up development, staging, and production environments</li> <li>Day 3-4: Configure environment variables and secrets management</li> <li>Day 5: Set up testing infrastructure</li> </ul>"},{"location":"implementation/timeline/#deliverables-for-phase-1","title":"Deliverables for Phase 1","text":"<ul> <li>Functional Docker environment with PostgreSQL and Redis</li> <li>Development, staging, and production configurations</li> <li>Docker Compose files for local development</li> <li>Documentation for Docker setup</li> </ul>"},{"location":"implementation/timeline/#phase-2-django-backend-implementation-weeks-3-6","title":"Phase 2: Django Backend Implementation (Weeks 3-6)","text":""},{"location":"implementation/timeline/#week-3-project-setup","title":"Week 3: Project Setup","text":"<ul> <li>Day 1-2: Initialize Django project structure</li> <li>Day 3-4: Configure Django REST Framework</li> <li>Day 5: Set up database connections and initial migrations</li> </ul>"},{"location":"implementation/timeline/#week-4-authentication-and-user-models","title":"Week 4: Authentication and User Models","text":"<ul> <li>Day 1-2: Implement custom User model and authentication system</li> <li>Day 3-4: Create Profile models and related endpoints</li> <li>Day 5: Set up permissions and role-based access</li> </ul>"},{"location":"implementation/timeline/#week-5-core-models-and-apis","title":"Week 5: Core Models and APIs","text":"<ul> <li>Day 1-2: Implement Location and Facility models</li> <li>Day 3-4: Implement Shift and Scheduling models</li> <li>Day 5: Create API endpoints for core functionality</li> </ul>"},{"location":"implementation/timeline/#week-6-remaining-models-and-apis","title":"Week 6: Remaining Models and APIs","text":"<ul> <li>Day 1-2: Implement Ticket models (Incident and Service)</li> <li>Day 3-4: Implement Equipment and Time Entry models</li> <li>Day 5: Create API endpoints for remaining functionality</li> </ul>"},{"location":"implementation/timeline/#deliverables-for-phase-2","title":"Deliverables for Phase 2","text":"<ul> <li>Complete Django project with all models</li> <li>RESTful API endpoints matching frontend expectations</li> <li>Authentication system integrated</li> <li>Initial data seeding scripts</li> </ul>"},{"location":"implementation/timeline/#phase-3-integration-and-testing-weeks-7-9","title":"Phase 3: Integration and Testing (Weeks 7-9)","text":""},{"location":"implementation/timeline/#week-7-integration","title":"Week 7: Integration","text":"<ul> <li>Day 1-2: Connect frontend to new backend locally</li> <li>Day 3-4: Test authentication flow</li> <li>Day 5: Address initial integration issues</li> </ul>"},{"location":"implementation/timeline/#week-8-testing","title":"Week 8: Testing","text":"<ul> <li>Day 1-2: Write unit tests for models and serializers</li> <li>Day 3-4: Write integration tests for API endpoints</li> <li>Day 5: Set up automated testing infrastructure</li> </ul>"},{"location":"implementation/timeline/#week-9-performance-and-security","title":"Week 9: Performance and Security","text":"<ul> <li>Day 1-2: Optimize database queries</li> <li>Day 3-4: Implement caching for performance</li> <li>Day 5: Perform security review and fix issues</li> </ul>"},{"location":"implementation/timeline/#deliverables-for-phase-3","title":"Deliverables for Phase 3","text":"<ul> <li>Integrated frontend and backend</li> <li>Comprehensive test suite</li> <li>Performance optimizations</li> <li>Documentation for API endpoints</li> </ul>"},{"location":"implementation/timeline/#phase-4-deployment-and-monitoring-weeks-10-11","title":"Phase 4: Deployment and Monitoring (Weeks 10-11)","text":""},{"location":"implementation/timeline/#week-10-deployment","title":"Week 10: Deployment","text":"<ul> <li>Day 1-2: Set up production Docker environment</li> <li>Day 3-4: Configure SSL and domain settings</li> <li>Day 5: Perform initial deployment to staging</li> </ul>"},{"location":"implementation/timeline/#week-11-monitoring-and-maintenance","title":"Week 11: Monitoring and Maintenance","text":"<ul> <li>Day 1-2: Set up monitoring and error tracking</li> <li>Day 3-4: Create backup and recovery procedures</li> <li>Day 5: Final deployment to production</li> </ul>"},{"location":"implementation/timeline/#deliverables-for-phase-4","title":"Deliverables for Phase 4","text":"<ul> <li>Production-ready deployment</li> <li>Monitoring and alerting system</li> <li>Backup and recovery procedures</li> <li>Maintenance documentation</li> </ul>"},{"location":"implementation/timeline/#risk-mitigation","title":"Risk Mitigation","text":""},{"location":"implementation/timeline/#potential-risks-and-mitigation-strategies","title":"Potential Risks and Mitigation Strategies","text":"Risk Probability Impact Mitigation Strategy Authentication compatibility issues Medium High Allocate extra time for authentication integration; create fallback auth mechanism API contract mismatches Medium High Comprehensive review of frontend expectations; create thorough tests Database performance issues Low Medium Early performance testing; implement proper indexing Docker configuration issues Low Medium Use well-tested configurations; create debug documentation Integration delays Medium Medium Schedule buffer time for integration; prioritize core functionality"},{"location":"implementation/timeline/#resource-allocation","title":"Resource Allocation","text":""},{"location":"implementation/timeline/#team-structure","title":"Team Structure","text":"<ul> <li>1 Backend Developer (Django/Python)</li> <li>1 DevOps Engineer (part-time for Docker configuration)</li> <li>1 QA Engineer (part-time for testing)</li> </ul>"},{"location":"implementation/timeline/#resource-distribution","title":"Resource Distribution","text":"Phase Backend Developer DevOps Engineer QA Engineer Phase 1 50% 50% - Phase 2 100% 10% - Phase 3 70% 10% 20% Phase 4 50% 30% 20%"},{"location":"implementation/timeline/#milestones-and-progress-tracking","title":"Milestones and Progress Tracking","text":""},{"location":"implementation/timeline/#key-milestones","title":"Key Milestones","text":"<ol> <li>M1: Docker environment fully configured (End of Week 2)</li> <li>M2: Django models and core APIs implemented (End of Week 5)</li> <li>M3: All API endpoints completed and tested (End of Week 8)</li> <li>M4: System deployed to production (End of Week 11)</li> </ol>"},{"location":"implementation/timeline/#progress-tracking","title":"Progress Tracking","text":"<p>Progress will be tracked using:</p> <ol> <li>Weekly status reports</li> <li>GitHub project board with task tracking</li> <li>Milestone completion reviews</li> <li>Daily standup meetings during critical integration phases</li> </ol>"},{"location":"implementation/timeline/#conclusion","title":"Conclusion","text":"<p>This implementation timeline provides a structured approach to developing the Broadcast Management System backend. The phased approach allows for iterative development and testing, with clear milestones to track progress. By following this timeline, the team can efficiently implement a robust backend that integrates seamlessly with the existing frontend application. </p>"}]}